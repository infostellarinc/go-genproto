// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stellarstation/api/v1/stellarstation.proto

package v1 // import "github.com/infostellarinc/go-stellarstation/api/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import monitoring "github.com/infostellarinc/go-stellarstation/api/v1/monitoring"
import orbit "github.com/infostellarinc/go-stellarstation/api/v1/orbit"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A type of framing of a binary payload used in satellite communicaation.
type Framing int32

const (
	// No framing done in the API. All payloads are assumed to be pre-framed and ready for
	// transmission to the satellite or API client with no additional processing.
	Framing_BITSTREAM Framing = 0
	// AX.25 (Amateur X.25) framing - https://en.wikipedia.org/wiki/AX.25
	Framing_AX25 Framing = 1
	// No framing or demodulation done in the API. Raw IQ data is sent to the API client with no
	// additional processing.
	Framing_IQ Framing = 2
	// A decoded PNG image frame.
	Framing_IMAGE_PNG Framing = 3
	// A decoded JPEG image.
	Framing_IMAGE_JPEG Framing = 4
	// Completely arbitrary, freeform text contained in a frame.
	Framing_FREE_TEXT_UTF8 Framing = 5
	// A waterfall diagram. This is actually for the whole plan and does not correspond to an
	// individual frame.
	Framing_WATERFALL Framing = 6
)

var Framing_name = map[int32]string{
	0: "BITSTREAM",
	1: "AX25",
	2: "IQ",
	3: "IMAGE_PNG",
	4: "IMAGE_JPEG",
	5: "FREE_TEXT_UTF8",
	6: "WATERFALL",
}
var Framing_value = map[string]int32{
	"BITSTREAM":      0,
	"AX25":           1,
	"IQ":             2,
	"IMAGE_PNG":      3,
	"IMAGE_JPEG":     4,
	"FREE_TEXT_UTF8": 5,
	"WATERFALL":      6,
}

func (x Framing) String() string {
	return proto.EnumName(Framing_name, int32(x))
}
func (Framing) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{0}
}

// The type of data available at the above URL.
type TelemetryMetadata_DataType int32

const (
	// Raw IQ data.
	TelemetryMetadata_RAW TelemetryMetadata_DataType = 0
	// Demodulated IQ data.
	TelemetryMetadata_DEMODULATED TelemetryMetadata_DataType = 1
	// Decoded data.
	TelemetryMetadata_DECODED TelemetryMetadata_DataType = 2
)

var TelemetryMetadata_DataType_name = map[int32]string{
	0: "RAW",
	1: "DEMODULATED",
	2: "DECODED",
}
var TelemetryMetadata_DataType_value = map[string]int32{
	"RAW":         0,
	"DEMODULATED": 1,
	"DECODED":     2,
}

func (x TelemetryMetadata_DataType) String() string {
	return proto.EnumName(TelemetryMetadata_DataType_name, int32(x))
}
func (TelemetryMetadata_DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{16, 0}
}

// A description of the status of a plan.
type Plan_Status int32

const (
	// The plan is reserved for execution in the future at `aos_time`.
	Plan_RESERVED Plan_Status = 0
	// The plan is currently executing and will end in the future at `los_time`.
	Plan_EXECUTING Plan_Status = 1
	// The plan already finished executing successfully.
	Plan_SUCCEEDED Plan_Status = 2
	// The plan failed to execute correctly.
	Plan_FAILED Plan_Status = 3
	// The plan was canceled. This can be explicitly by calling `CancelPlan` or implicit due to
	// cancellation by the ground station in the plan (e.g., due to bad weather).
	Plan_CANCELED Plan_Status = 4
	// The plan completed execution and telemetry data is being processed.
	Plan_PROCESSING Plan_Status = 5
)

var Plan_Status_name = map[int32]string{
	0: "RESERVED",
	1: "EXECUTING",
	2: "SUCCEEDED",
	3: "FAILED",
	4: "CANCELED",
	5: "PROCESSING",
}
var Plan_Status_value = map[string]int32{
	"RESERVED":   0,
	"EXECUTING":  1,
	"SUCCEEDED":  2,
	"FAILED":     3,
	"CANCELED":   4,
	"PROCESSING": 5,
}

func (x Plan_Status) String() string {
	return proto.EnumName(Plan_Status_name, int32(x))
}
func (Plan_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{17, 0}
}

// Request for the `OpenSatelliteStream` method.
type SatelliteStreamRequest struct {
	// The ID of the satellite to open a stream with. The ID of a satellite can be found on the
	// StellarStation Console page for the satellite.
	SatelliteId string `protobuf:"bytes,1,opt,name=satellite_id,json=satelliteId,proto3" json:"satellite_id,omitempty"`
	// The `SatelliteStreamResponse.stream_id` from a previously opened stream to resume. If the
	// specified stream has already expired or been closed, the stream is closed with a `ABORTED`
	// error.
	StreamId string `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// Whether monitoring events should be returned by the stream in
	// `SatelliteStreamResponse.stream_event`. If set in the first request of the stream, events of
	// type `StreamEvent` will be returned throughout the lifetime of the stream.
	EnableEvents bool `protobuf:"varint,5,opt,name=enable_events,json=enableEvents,proto3" json:"enable_events,omitempty"`
	// A unique ID identifying this request. If `enable_events` is true and this is filled, events
	// returned in `SatelliteStreamResponse.stream_event` that correspond to this request will have
	// this value copied into `StreamEvent.request_id` for correlation. The API will treat this as an
	// opaque identifier which can be set to any value, e.g., to the same value as the request ID or
	// command number in a downstream system. For simple cases, it is often simplest to set this to a
	// standard UUID.
	RequestId string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// A request to send on the satellite stream. Currently only command sending to the satellite is
	// supported. The request does not need to be filled on the first request to
	// `OpenSatelliteStream`.
	//
	// Types that are valid to be assigned to Request:
	//	*SatelliteStreamRequest_SendSatelliteCommandsRequest
	Request isSatelliteStreamRequest_Request `protobuf_oneof:"Request"`
	// The `Framing` types to accept, for satellites that have been configured for multiple framings
	// (e.g., IQ + AX25). If empty, all framings produced by the satellite will be returned.
	AcceptedFraming      []Framing `protobuf:"varint,4,rep,packed,name=accepted_framing,json=acceptedFraming,proto3,enum=stellarstation.api.v1.Framing" json:"accepted_framing,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SatelliteStreamRequest) Reset()         { *m = SatelliteStreamRequest{} }
func (m *SatelliteStreamRequest) String() string { return proto.CompactTextString(m) }
func (*SatelliteStreamRequest) ProtoMessage()    {}
func (*SatelliteStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{0}
}
func (m *SatelliteStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SatelliteStreamRequest.Unmarshal(m, b)
}
func (m *SatelliteStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SatelliteStreamRequest.Marshal(b, m, deterministic)
}
func (dst *SatelliteStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SatelliteStreamRequest.Merge(dst, src)
}
func (m *SatelliteStreamRequest) XXX_Size() int {
	return xxx_messageInfo_SatelliteStreamRequest.Size(m)
}
func (m *SatelliteStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SatelliteStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SatelliteStreamRequest proto.InternalMessageInfo

func (m *SatelliteStreamRequest) GetSatelliteId() string {
	if m != nil {
		return m.SatelliteId
	}
	return ""
}

func (m *SatelliteStreamRequest) GetStreamId() string {
	if m != nil {
		return m.StreamId
	}
	return ""
}

func (m *SatelliteStreamRequest) GetEnableEvents() bool {
	if m != nil {
		return m.EnableEvents
	}
	return false
}

func (m *SatelliteStreamRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type isSatelliteStreamRequest_Request interface {
	isSatelliteStreamRequest_Request()
}

type SatelliteStreamRequest_SendSatelliteCommandsRequest struct {
	SendSatelliteCommandsRequest *SendSatelliteCommandsRequest `protobuf:"bytes,3,opt,name=send_satellite_commands_request,json=sendSatelliteCommandsRequest,proto3,oneof"`
}

func (*SatelliteStreamRequest_SendSatelliteCommandsRequest) isSatelliteStreamRequest_Request() {}

func (m *SatelliteStreamRequest) GetRequest() isSatelliteStreamRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SatelliteStreamRequest) GetSendSatelliteCommandsRequest() *SendSatelliteCommandsRequest {
	if x, ok := m.GetRequest().(*SatelliteStreamRequest_SendSatelliteCommandsRequest); ok {
		return x.SendSatelliteCommandsRequest
	}
	return nil
}

func (m *SatelliteStreamRequest) GetAcceptedFraming() []Framing {
	if m != nil {
		return m.AcceptedFraming
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SatelliteStreamRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SatelliteStreamRequest_OneofMarshaler, _SatelliteStreamRequest_OneofUnmarshaler, _SatelliteStreamRequest_OneofSizer, []interface{}{
		(*SatelliteStreamRequest_SendSatelliteCommandsRequest)(nil),
	}
}

func _SatelliteStreamRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SatelliteStreamRequest)
	// Request
	switch x := m.Request.(type) {
	case *SatelliteStreamRequest_SendSatelliteCommandsRequest:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SendSatelliteCommandsRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SatelliteStreamRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _SatelliteStreamRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SatelliteStreamRequest)
	switch tag {
	case 3: // Request.send_satellite_commands_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SendSatelliteCommandsRequest)
		err := b.DecodeMessage(msg)
		m.Request = &SatelliteStreamRequest_SendSatelliteCommandsRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SatelliteStreamRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SatelliteStreamRequest)
	// Request
	switch x := m.Request.(type) {
	case *SatelliteStreamRequest_SendSatelliteCommandsRequest:
		s := proto.Size(x.SendSatelliteCommandsRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A request to send commands to a satellite.
//
// Next ID: 1
type SendSatelliteCommandsRequest struct {
	// The command frames to send to the satellite. All commands will be transmitted in sequence
	// immediately, during which time telemetry will not be received. After all commands have been
	// transmitted, telemetry receive will be immediately re-enabled. The maximum size of each command
	// is 2MB. If a command larger than 2MB is received, the stream will be closed with a
	// `RESOURCE_EXHAUSTED` error.
	Command              [][]byte `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendSatelliteCommandsRequest) Reset()         { *m = SendSatelliteCommandsRequest{} }
func (m *SendSatelliteCommandsRequest) String() string { return proto.CompactTextString(m) }
func (*SendSatelliteCommandsRequest) ProtoMessage()    {}
func (*SendSatelliteCommandsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{1}
}
func (m *SendSatelliteCommandsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendSatelliteCommandsRequest.Unmarshal(m, b)
}
func (m *SendSatelliteCommandsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendSatelliteCommandsRequest.Marshal(b, m, deterministic)
}
func (dst *SendSatelliteCommandsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendSatelliteCommandsRequest.Merge(dst, src)
}
func (m *SendSatelliteCommandsRequest) XXX_Size() int {
	return xxx_messageInfo_SendSatelliteCommandsRequest.Size(m)
}
func (m *SendSatelliteCommandsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendSatelliteCommandsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendSatelliteCommandsRequest proto.InternalMessageInfo

func (m *SendSatelliteCommandsRequest) GetCommand() [][]byte {
	if m != nil {
		return m.Command
	}
	return nil
}

// A response from the `OpenSatelliteStream` method.
type SatelliteStreamResponse struct {
	// The ID of this stream, which can be used in a subsequent call to `OpenSatelliteStream` to
	// resume this stream on interruption (e.g., if a network failure causes the connection to be
	// closed mid-stream). Telemetry received on a previously opened stream with no current listener
	// will be buffered for a maximum of 1 minute, and the stream itself will be cancelled and no more
	// buffering will occur if no client resumes the stream with `OpenSatelliteStream` within 10
	// minutes.
	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// A response on the stream. Currently the only type of response is telemetry received from the
	// satellite.
	//
	// Types that are valid to be assigned to Response:
	//	*SatelliteStreamResponse_ReceiveTelemetryResponse
	//	*SatelliteStreamResponse_StreamEvent
	Response             isSatelliteStreamResponse_Response `protobuf_oneof:"Response"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *SatelliteStreamResponse) Reset()         { *m = SatelliteStreamResponse{} }
func (m *SatelliteStreamResponse) String() string { return proto.CompactTextString(m) }
func (*SatelliteStreamResponse) ProtoMessage()    {}
func (*SatelliteStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{2}
}
func (m *SatelliteStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SatelliteStreamResponse.Unmarshal(m, b)
}
func (m *SatelliteStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SatelliteStreamResponse.Marshal(b, m, deterministic)
}
func (dst *SatelliteStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SatelliteStreamResponse.Merge(dst, src)
}
func (m *SatelliteStreamResponse) XXX_Size() int {
	return xxx_messageInfo_SatelliteStreamResponse.Size(m)
}
func (m *SatelliteStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SatelliteStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SatelliteStreamResponse proto.InternalMessageInfo

func (m *SatelliteStreamResponse) GetStreamId() string {
	if m != nil {
		return m.StreamId
	}
	return ""
}

type isSatelliteStreamResponse_Response interface {
	isSatelliteStreamResponse_Response()
}

type SatelliteStreamResponse_ReceiveTelemetryResponse struct {
	ReceiveTelemetryResponse *ReceiveTelemetryResponse `protobuf:"bytes,2,opt,name=receive_telemetry_response,json=receiveTelemetryResponse,proto3,oneof"`
}

type SatelliteStreamResponse_StreamEvent struct {
	StreamEvent *StreamEvent `protobuf:"bytes,3,opt,name=stream_event,json=streamEvent,proto3,oneof"`
}

func (*SatelliteStreamResponse_ReceiveTelemetryResponse) isSatelliteStreamResponse_Response() {}

func (*SatelliteStreamResponse_StreamEvent) isSatelliteStreamResponse_Response() {}

func (m *SatelliteStreamResponse) GetResponse() isSatelliteStreamResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SatelliteStreamResponse) GetReceiveTelemetryResponse() *ReceiveTelemetryResponse {
	if x, ok := m.GetResponse().(*SatelliteStreamResponse_ReceiveTelemetryResponse); ok {
		return x.ReceiveTelemetryResponse
	}
	return nil
}

func (m *SatelliteStreamResponse) GetStreamEvent() *StreamEvent {
	if x, ok := m.GetResponse().(*SatelliteStreamResponse_StreamEvent); ok {
		return x.StreamEvent
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SatelliteStreamResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SatelliteStreamResponse_OneofMarshaler, _SatelliteStreamResponse_OneofUnmarshaler, _SatelliteStreamResponse_OneofSizer, []interface{}{
		(*SatelliteStreamResponse_ReceiveTelemetryResponse)(nil),
		(*SatelliteStreamResponse_StreamEvent)(nil),
	}
}

func _SatelliteStreamResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SatelliteStreamResponse)
	// Response
	switch x := m.Response.(type) {
	case *SatelliteStreamResponse_ReceiveTelemetryResponse:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReceiveTelemetryResponse); err != nil {
			return err
		}
	case *SatelliteStreamResponse_StreamEvent:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StreamEvent); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SatelliteStreamResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _SatelliteStreamResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SatelliteStreamResponse)
	switch tag {
	case 2: // Response.receive_telemetry_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReceiveTelemetryResponse)
		err := b.DecodeMessage(msg)
		m.Response = &SatelliteStreamResponse_ReceiveTelemetryResponse{msg}
		return true, err
	case 3: // Response.stream_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StreamEvent)
		err := b.DecodeMessage(msg)
		m.Response = &SatelliteStreamResponse_StreamEvent{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SatelliteStreamResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SatelliteStreamResponse)
	// Response
	switch x := m.Response.(type) {
	case *SatelliteStreamResponse_ReceiveTelemetryResponse:
		s := proto.Size(x.ReceiveTelemetryResponse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SatelliteStreamResponse_StreamEvent:
		s := proto.Size(x.StreamEvent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A response from a satellite containing telemetry.
type ReceiveTelemetryResponse struct {
	// The telemetry received.
	Telemetry            *Telemetry `protobuf:"bytes,1,opt,name=telemetry,proto3" json:"telemetry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ReceiveTelemetryResponse) Reset()         { *m = ReceiveTelemetryResponse{} }
func (m *ReceiveTelemetryResponse) String() string { return proto.CompactTextString(m) }
func (*ReceiveTelemetryResponse) ProtoMessage()    {}
func (*ReceiveTelemetryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{3}
}
func (m *ReceiveTelemetryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiveTelemetryResponse.Unmarshal(m, b)
}
func (m *ReceiveTelemetryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiveTelemetryResponse.Marshal(b, m, deterministic)
}
func (dst *ReceiveTelemetryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveTelemetryResponse.Merge(dst, src)
}
func (m *ReceiveTelemetryResponse) XXX_Size() int {
	return xxx_messageInfo_ReceiveTelemetryResponse.Size(m)
}
func (m *ReceiveTelemetryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveTelemetryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveTelemetryResponse proto.InternalMessageInfo

func (m *ReceiveTelemetryResponse) GetTelemetry() *Telemetry {
	if m != nil {
		return m.Telemetry
	}
	return nil
}

// A chunk or frame of telemetry data that has been received from a satellite.
type Telemetry struct {
	// The framing of this telemetry data. If `RAW`, this telemetry will be an arbitrarily sized
	// chunk of the bitstream.
	Framing Framing `protobuf:"varint,1,opt,name=framing,proto3,enum=stellarstation.api.v1.Framing" json:"framing,omitempty"`
	// The payload of this telemetry.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// The actual downlink frequency, in Hz, used when receiving `data`, including adjustments for
	// doppler shift.
	DownlinkFrequencyHz uint64 `protobuf:"varint,3,opt,name=downlink_frequency_hz,json=downlinkFrequencyHz,proto3" json:"downlink_frequency_hz,omitempty"`
	// Timestamp when the first byte of `data` was received.
	TimeFirstByteReceived *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time_first_byte_received,json=timeFirstByteReceived,proto3" json:"time_first_byte_received,omitempty"`
	// Timestamp when the last byte of `data` was received.
	TimeLastByteReceived *timestamp.Timestamp `protobuf:"bytes,5,opt,name=time_last_byte_received,json=timeLastByteReceived,proto3" json:"time_last_byte_received,omitempty"`
	// The binary header of the telemetry frame, if `framing` is not `RAW`.
	//
	// * AX25 - This is either Address + Control, or Address + Control + PID. The checksum is not
	//          returned.
	FrameHeader          []byte   `protobuf:"bytes,6,opt,name=frame_header,json=frameHeader,proto3" json:"frame_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Telemetry) Reset()         { *m = Telemetry{} }
func (m *Telemetry) String() string { return proto.CompactTextString(m) }
func (*Telemetry) ProtoMessage()    {}
func (*Telemetry) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{4}
}
func (m *Telemetry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Telemetry.Unmarshal(m, b)
}
func (m *Telemetry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Telemetry.Marshal(b, m, deterministic)
}
func (dst *Telemetry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Telemetry.Merge(dst, src)
}
func (m *Telemetry) XXX_Size() int {
	return xxx_messageInfo_Telemetry.Size(m)
}
func (m *Telemetry) XXX_DiscardUnknown() {
	xxx_messageInfo_Telemetry.DiscardUnknown(m)
}

var xxx_messageInfo_Telemetry proto.InternalMessageInfo

func (m *Telemetry) GetFraming() Framing {
	if m != nil {
		return m.Framing
	}
	return Framing_BITSTREAM
}

func (m *Telemetry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Telemetry) GetDownlinkFrequencyHz() uint64 {
	if m != nil {
		return m.DownlinkFrequencyHz
	}
	return 0
}

func (m *Telemetry) GetTimeFirstByteReceived() *timestamp.Timestamp {
	if m != nil {
		return m.TimeFirstByteReceived
	}
	return nil
}

func (m *Telemetry) GetTimeLastByteReceived() *timestamp.Timestamp {
	if m != nil {
		return m.TimeLastByteReceived
	}
	return nil
}

func (m *Telemetry) GetFrameHeader() []byte {
	if m != nil {
		return m.FrameHeader
	}
	return nil
}

// A monitoring event that occurred during the execution of the plan. Information about the current
// configuration of the ground station and state of components is returned to provide information
// that can help to troubleshoot issues with the plan.
type PlanMonitoringEvent struct {
	// The ID of the plan being monitored.
	PlanId string `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	// Types that are valid to be assigned to Info:
	//	*PlanMonitoringEvent_GroundStationConfiguration
	//	*PlanMonitoringEvent_GroundStationState
	//	*PlanMonitoringEvent_GroundStationEvent
	Info                 isPlanMonitoringEvent_Info `protobuf_oneof:"Info"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PlanMonitoringEvent) Reset()         { *m = PlanMonitoringEvent{} }
func (m *PlanMonitoringEvent) String() string { return proto.CompactTextString(m) }
func (*PlanMonitoringEvent) ProtoMessage()    {}
func (*PlanMonitoringEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{5}
}
func (m *PlanMonitoringEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlanMonitoringEvent.Unmarshal(m, b)
}
func (m *PlanMonitoringEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlanMonitoringEvent.Marshal(b, m, deterministic)
}
func (dst *PlanMonitoringEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlanMonitoringEvent.Merge(dst, src)
}
func (m *PlanMonitoringEvent) XXX_Size() int {
	return xxx_messageInfo_PlanMonitoringEvent.Size(m)
}
func (m *PlanMonitoringEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PlanMonitoringEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PlanMonitoringEvent proto.InternalMessageInfo

func (m *PlanMonitoringEvent) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

type isPlanMonitoringEvent_Info interface {
	isPlanMonitoringEvent_Info()
}

type PlanMonitoringEvent_GroundStationConfiguration struct {
	GroundStationConfiguration *monitoring.GroundStationConfiguration `protobuf:"bytes,2,opt,name=ground_station_configuration,json=groundStationConfiguration,proto3,oneof"`
}

type PlanMonitoringEvent_GroundStationState struct {
	GroundStationState *monitoring.GroundStationState `protobuf:"bytes,3,opt,name=ground_station_state,json=groundStationState,proto3,oneof"`
}

type PlanMonitoringEvent_GroundStationEvent struct {
	GroundStationEvent *monitoring.GroundStationEvent `protobuf:"bytes,4,opt,name=ground_station_event,json=groundStationEvent,proto3,oneof"`
}

func (*PlanMonitoringEvent_GroundStationConfiguration) isPlanMonitoringEvent_Info() {}

func (*PlanMonitoringEvent_GroundStationState) isPlanMonitoringEvent_Info() {}

func (*PlanMonitoringEvent_GroundStationEvent) isPlanMonitoringEvent_Info() {}

func (m *PlanMonitoringEvent) GetInfo() isPlanMonitoringEvent_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *PlanMonitoringEvent) GetGroundStationConfiguration() *monitoring.GroundStationConfiguration {
	if x, ok := m.GetInfo().(*PlanMonitoringEvent_GroundStationConfiguration); ok {
		return x.GroundStationConfiguration
	}
	return nil
}

func (m *PlanMonitoringEvent) GetGroundStationState() *monitoring.GroundStationState {
	if x, ok := m.GetInfo().(*PlanMonitoringEvent_GroundStationState); ok {
		return x.GroundStationState
	}
	return nil
}

func (m *PlanMonitoringEvent) GetGroundStationEvent() *monitoring.GroundStationEvent {
	if x, ok := m.GetInfo().(*PlanMonitoringEvent_GroundStationEvent); ok {
		return x.GroundStationEvent
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PlanMonitoringEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PlanMonitoringEvent_OneofMarshaler, _PlanMonitoringEvent_OneofUnmarshaler, _PlanMonitoringEvent_OneofSizer, []interface{}{
		(*PlanMonitoringEvent_GroundStationConfiguration)(nil),
		(*PlanMonitoringEvent_GroundStationState)(nil),
		(*PlanMonitoringEvent_GroundStationEvent)(nil),
	}
}

func _PlanMonitoringEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PlanMonitoringEvent)
	// Info
	switch x := m.Info.(type) {
	case *PlanMonitoringEvent_GroundStationConfiguration:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GroundStationConfiguration); err != nil {
			return err
		}
	case *PlanMonitoringEvent_GroundStationState:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GroundStationState); err != nil {
			return err
		}
	case *PlanMonitoringEvent_GroundStationEvent:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GroundStationEvent); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PlanMonitoringEvent.Info has unexpected type %T", x)
	}
	return nil
}

func _PlanMonitoringEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PlanMonitoringEvent)
	switch tag {
	case 2: // Info.ground_station_configuration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(monitoring.GroundStationConfiguration)
		err := b.DecodeMessage(msg)
		m.Info = &PlanMonitoringEvent_GroundStationConfiguration{msg}
		return true, err
	case 3: // Info.ground_station_state
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(monitoring.GroundStationState)
		err := b.DecodeMessage(msg)
		m.Info = &PlanMonitoringEvent_GroundStationState{msg}
		return true, err
	case 4: // Info.ground_station_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(monitoring.GroundStationEvent)
		err := b.DecodeMessage(msg)
		m.Info = &PlanMonitoringEvent_GroundStationEvent{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PlanMonitoringEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PlanMonitoringEvent)
	// Info
	switch x := m.Info.(type) {
	case *PlanMonitoringEvent_GroundStationConfiguration:
		s := proto.Size(x.GroundStationConfiguration)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlanMonitoringEvent_GroundStationState:
		s := proto.Size(x.GroundStationState)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlanMonitoringEvent_GroundStationEvent:
		s := proto.Size(x.GroundStationEvent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// An event that occurred while processing the stream. Only returned if `enable_events` was true
// in the first `SatelliteStreamRequest` of the stream. A `StreamEvent` will have one of several
// types of event payloads corresponding to event types. Many of these payloads will be empty,
// depending on the context of an event, but are still returned as messages to allow future
// extension.
type StreamEvent struct {
	// The ID of the request this event corresponds to, copied from
	// `SatelliteStreamRequest.request_id` when present. If the event doesn't correspond to a request,
	// this is always empty.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// A stream event payload.
	//
	// Types that are valid to be assigned to Event:
	//	*StreamEvent_CommandSent
	//	*StreamEvent_PlanMonitoringEvent
	Event                isStreamEvent_Event `protobuf_oneof:"Event"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *StreamEvent) Reset()         { *m = StreamEvent{} }
func (m *StreamEvent) String() string { return proto.CompactTextString(m) }
func (*StreamEvent) ProtoMessage()    {}
func (*StreamEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{6}
}
func (m *StreamEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamEvent.Unmarshal(m, b)
}
func (m *StreamEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamEvent.Marshal(b, m, deterministic)
}
func (dst *StreamEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent.Merge(dst, src)
}
func (m *StreamEvent) XXX_Size() int {
	return xxx_messageInfo_StreamEvent.Size(m)
}
func (m *StreamEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent proto.InternalMessageInfo

func (m *StreamEvent) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type isStreamEvent_Event interface {
	isStreamEvent_Event()
}

type StreamEvent_CommandSent struct {
	CommandSent *StreamEvent_CommandSentFromGroundStation `protobuf:"bytes,2,opt,name=command_sent,json=commandSent,proto3,oneof"`
}

type StreamEvent_PlanMonitoringEvent struct {
	PlanMonitoringEvent *PlanMonitoringEvent `protobuf:"bytes,3,opt,name=plan_monitoring_event,json=planMonitoringEvent,proto3,oneof"`
}

func (*StreamEvent_CommandSent) isStreamEvent_Event() {}

func (*StreamEvent_PlanMonitoringEvent) isStreamEvent_Event() {}

func (m *StreamEvent) GetEvent() isStreamEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *StreamEvent) GetCommandSent() *StreamEvent_CommandSentFromGroundStation {
	if x, ok := m.GetEvent().(*StreamEvent_CommandSent); ok {
		return x.CommandSent
	}
	return nil
}

func (m *StreamEvent) GetPlanMonitoringEvent() *PlanMonitoringEvent {
	if x, ok := m.GetEvent().(*StreamEvent_PlanMonitoringEvent); ok {
		return x.PlanMonitoringEvent
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamEvent_OneofMarshaler, _StreamEvent_OneofUnmarshaler, _StreamEvent_OneofSizer, []interface{}{
		(*StreamEvent_CommandSent)(nil),
		(*StreamEvent_PlanMonitoringEvent)(nil),
	}
}

func _StreamEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamEvent)
	// Event
	switch x := m.Event.(type) {
	case *StreamEvent_CommandSent:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CommandSent); err != nil {
			return err
		}
	case *StreamEvent_PlanMonitoringEvent:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlanMonitoringEvent); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamEvent.Event has unexpected type %T", x)
	}
	return nil
}

func _StreamEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamEvent)
	switch tag {
	case 2: // Event.command_sent
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StreamEvent_CommandSentFromGroundStation)
		err := b.DecodeMessage(msg)
		m.Event = &StreamEvent_CommandSent{msg}
		return true, err
	case 3: // Event.plan_monitoring_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlanMonitoringEvent)
		err := b.DecodeMessage(msg)
		m.Event = &StreamEvent_PlanMonitoringEvent{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamEvent)
	// Event
	switch x := m.Event.(type) {
	case *StreamEvent_CommandSent:
		s := proto.Size(x.CommandSent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamEvent_PlanMonitoringEvent:
		s := proto.Size(x.PlanMonitoringEvent)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// An event indicating the commands in the request were sent by the ground station through its
// radio.
type StreamEvent_CommandSentFromGroundStation struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamEvent_CommandSentFromGroundStation) Reset() {
	*m = StreamEvent_CommandSentFromGroundStation{}
}
func (m *StreamEvent_CommandSentFromGroundStation) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_CommandSentFromGroundStation) ProtoMessage()    {}
func (*StreamEvent_CommandSentFromGroundStation) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{6, 0}
}
func (m *StreamEvent_CommandSentFromGroundStation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamEvent_CommandSentFromGroundStation.Unmarshal(m, b)
}
func (m *StreamEvent_CommandSentFromGroundStation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamEvent_CommandSentFromGroundStation.Marshal(b, m, deterministic)
}
func (dst *StreamEvent_CommandSentFromGroundStation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_CommandSentFromGroundStation.Merge(dst, src)
}
func (m *StreamEvent_CommandSentFromGroundStation) XXX_Size() int {
	return xxx_messageInfo_StreamEvent_CommandSentFromGroundStation.Size(m)
}
func (m *StreamEvent_CommandSentFromGroundStation) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_CommandSentFromGroundStation.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_CommandSentFromGroundStation proto.InternalMessageInfo

// Request for the `CancelPlan` method.
type CancelPlanRequest struct {
	// The id of the plan to cancel, i.e., the value of `Plan.id`.
	PlanId               string   `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelPlanRequest) Reset()         { *m = CancelPlanRequest{} }
func (m *CancelPlanRequest) String() string { return proto.CompactTextString(m) }
func (*CancelPlanRequest) ProtoMessage()    {}
func (*CancelPlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{7}
}
func (m *CancelPlanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelPlanRequest.Unmarshal(m, b)
}
func (m *CancelPlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelPlanRequest.Marshal(b, m, deterministic)
}
func (dst *CancelPlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelPlanRequest.Merge(dst, src)
}
func (m *CancelPlanRequest) XXX_Size() int {
	return xxx_messageInfo_CancelPlanRequest.Size(m)
}
func (m *CancelPlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelPlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelPlanRequest proto.InternalMessageInfo

func (m *CancelPlanRequest) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

// Response for the `CancelPlan` method.
type CancelPlanResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelPlanResponse) Reset()         { *m = CancelPlanResponse{} }
func (m *CancelPlanResponse) String() string { return proto.CompactTextString(m) }
func (*CancelPlanResponse) ProtoMessage()    {}
func (*CancelPlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{8}
}
func (m *CancelPlanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelPlanResponse.Unmarshal(m, b)
}
func (m *CancelPlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelPlanResponse.Marshal(b, m, deterministic)
}
func (dst *CancelPlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelPlanResponse.Merge(dst, src)
}
func (m *CancelPlanResponse) XXX_Size() int {
	return xxx_messageInfo_CancelPlanResponse.Size(m)
}
func (m *CancelPlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelPlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CancelPlanResponse proto.InternalMessageInfo

// Request for the `ListUpcomingAvailablePasses` method.
type ListUpcomingAvailablePassesRequest struct {
	// The ID of the satellite to list passes for. The ID of a satellite can be found on the
	// StellarStation Console page for the satellite.
	SatelliteId          string   `protobuf:"bytes,1,opt,name=satellite_id,json=satelliteId,proto3" json:"satellite_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListUpcomingAvailablePassesRequest) Reset()         { *m = ListUpcomingAvailablePassesRequest{} }
func (m *ListUpcomingAvailablePassesRequest) String() string { return proto.CompactTextString(m) }
func (*ListUpcomingAvailablePassesRequest) ProtoMessage()    {}
func (*ListUpcomingAvailablePassesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{9}
}
func (m *ListUpcomingAvailablePassesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListUpcomingAvailablePassesRequest.Unmarshal(m, b)
}
func (m *ListUpcomingAvailablePassesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListUpcomingAvailablePassesRequest.Marshal(b, m, deterministic)
}
func (dst *ListUpcomingAvailablePassesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUpcomingAvailablePassesRequest.Merge(dst, src)
}
func (m *ListUpcomingAvailablePassesRequest) XXX_Size() int {
	return xxx_messageInfo_ListUpcomingAvailablePassesRequest.Size(m)
}
func (m *ListUpcomingAvailablePassesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUpcomingAvailablePassesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListUpcomingAvailablePassesRequest proto.InternalMessageInfo

func (m *ListUpcomingAvailablePassesRequest) GetSatelliteId() string {
	if m != nil {
		return m.SatelliteId
	}
	return ""
}

// Response for the `ListUpcomingAvailablePasses` method.
type ListUpcomingAvailablePassesResponse struct {
	// The upcoming, schedulable passes for the satellite.
	Pass                 []*Pass  `protobuf:"bytes,1,rep,name=pass,proto3" json:"pass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListUpcomingAvailablePassesResponse) Reset()         { *m = ListUpcomingAvailablePassesResponse{} }
func (m *ListUpcomingAvailablePassesResponse) String() string { return proto.CompactTextString(m) }
func (*ListUpcomingAvailablePassesResponse) ProtoMessage()    {}
func (*ListUpcomingAvailablePassesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{10}
}
func (m *ListUpcomingAvailablePassesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListUpcomingAvailablePassesResponse.Unmarshal(m, b)
}
func (m *ListUpcomingAvailablePassesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListUpcomingAvailablePassesResponse.Marshal(b, m, deterministic)
}
func (dst *ListUpcomingAvailablePassesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUpcomingAvailablePassesResponse.Merge(dst, src)
}
func (m *ListUpcomingAvailablePassesResponse) XXX_Size() int {
	return xxx_messageInfo_ListUpcomingAvailablePassesResponse.Size(m)
}
func (m *ListUpcomingAvailablePassesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUpcomingAvailablePassesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListUpcomingAvailablePassesResponse proto.InternalMessageInfo

func (m *ListUpcomingAvailablePassesResponse) GetPass() []*Pass {
	if m != nil {
		return m.Pass
	}
	return nil
}

// Request for the `ReservePass` method.
type ReservePassRequest struct {
	// The token that specifies the pass, as returned in `Pass.reservation_token`.
	ReservationToken     string   `protobuf:"bytes,1,opt,name=reservation_token,json=reservationToken,proto3" json:"reservation_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReservePassRequest) Reset()         { *m = ReservePassRequest{} }
func (m *ReservePassRequest) String() string { return proto.CompactTextString(m) }
func (*ReservePassRequest) ProtoMessage()    {}
func (*ReservePassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{11}
}
func (m *ReservePassRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReservePassRequest.Unmarshal(m, b)
}
func (m *ReservePassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReservePassRequest.Marshal(b, m, deterministic)
}
func (dst *ReservePassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReservePassRequest.Merge(dst, src)
}
func (m *ReservePassRequest) XXX_Size() int {
	return xxx_messageInfo_ReservePassRequest.Size(m)
}
func (m *ReservePassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReservePassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReservePassRequest proto.InternalMessageInfo

func (m *ReservePassRequest) GetReservationToken() string {
	if m != nil {
		return m.ReservationToken
	}
	return ""
}

// Response for the `ReservePass` method.
type ReservePassResponse struct {
	// The reserved plan.
	Plan                 *Plan    `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReservePassResponse) Reset()         { *m = ReservePassResponse{} }
func (m *ReservePassResponse) String() string { return proto.CompactTextString(m) }
func (*ReservePassResponse) ProtoMessage()    {}
func (*ReservePassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{12}
}
func (m *ReservePassResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReservePassResponse.Unmarshal(m, b)
}
func (m *ReservePassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReservePassResponse.Marshal(b, m, deterministic)
}
func (dst *ReservePassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReservePassResponse.Merge(dst, src)
}
func (m *ReservePassResponse) XXX_Size() int {
	return xxx_messageInfo_ReservePassResponse.Size(m)
}
func (m *ReservePassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReservePassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReservePassResponse proto.InternalMessageInfo

func (m *ReservePassResponse) GetPlan() *Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

// Request for the `ListPlans` method.
type ListPlansRequest struct {
	// The ID of the satellite to list plans for. The ID can be found on the StellarStation
	// Console page for the satellite.
	SatelliteId string `protobuf:"bytes,1,opt,name=satellite_id,json=satelliteId,proto3" json:"satellite_id,omitempty"`
	// The start time of the range of plans to list (inclusive). Only plans with an Acquisition of
	// Signal (AOS) at or after this time will be returned. It is an error for the duration between
	// `aos_after` and `aos_before` to be longer than 31 days.
	AosAfter *timestamp.Timestamp `protobuf:"bytes,2,opt,name=aos_after,json=aosAfter,proto3" json:"aos_after,omitempty"`
	// The end time of the range of plans to list (exclusive). Only plans with an Acquisition of
	// Signal (AOS) before this time will be returned. It is an error for the duration between
	// `aos_after` and `aos_before` to be longer than 31 days.
	AosBefore            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=aos_before,json=aosBefore,proto3" json:"aos_before,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListPlansRequest) Reset()         { *m = ListPlansRequest{} }
func (m *ListPlansRequest) String() string { return proto.CompactTextString(m) }
func (*ListPlansRequest) ProtoMessage()    {}
func (*ListPlansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{13}
}
func (m *ListPlansRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPlansRequest.Unmarshal(m, b)
}
func (m *ListPlansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPlansRequest.Marshal(b, m, deterministic)
}
func (dst *ListPlansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPlansRequest.Merge(dst, src)
}
func (m *ListPlansRequest) XXX_Size() int {
	return xxx_messageInfo_ListPlansRequest.Size(m)
}
func (m *ListPlansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPlansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPlansRequest proto.InternalMessageInfo

func (m *ListPlansRequest) GetSatelliteId() string {
	if m != nil {
		return m.SatelliteId
	}
	return ""
}

func (m *ListPlansRequest) GetAosAfter() *timestamp.Timestamp {
	if m != nil {
		return m.AosAfter
	}
	return nil
}

func (m *ListPlansRequest) GetAosBefore() *timestamp.Timestamp {
	if m != nil {
		return m.AosBefore
	}
	return nil
}

// A response from the `ListPlans` method.
type ListPlansResponse struct {
	// The requested list of plans for the satellite.
	Plan                 []*Plan  `protobuf:"bytes,1,rep,name=plan,proto3" json:"plan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPlansResponse) Reset()         { *m = ListPlansResponse{} }
func (m *ListPlansResponse) String() string { return proto.CompactTextString(m) }
func (*ListPlansResponse) ProtoMessage()    {}
func (*ListPlansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{14}
}
func (m *ListPlansResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPlansResponse.Unmarshal(m, b)
}
func (m *ListPlansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPlansResponse.Marshal(b, m, deterministic)
}
func (dst *ListPlansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPlansResponse.Merge(dst, src)
}
func (m *ListPlansResponse) XXX_Size() int {
	return xxx_messageInfo_ListPlansResponse.Size(m)
}
func (m *ListPlansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPlansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPlansResponse proto.InternalMessageInfo

func (m *ListPlansResponse) GetPlan() []*Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

// A pass during which a satellite can be communicated with from a given ground station.
type Pass struct {
	// A unique token for this pass that can be used for scheduling it.
	ReservationToken string `protobuf:"bytes,1,opt,name=reservation_token,json=reservationToken,proto3" json:"reservation_token,omitempty"`
	// The time of Acquisition of Signal (AOS) between the ground station and satellite in this pass.
	AosTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=aos_time,json=aosTime,proto3" json:"aos_time,omitempty"`
	// The time of Loss of Signal (LOS) between the ground station and satellite in this pass.
	LosTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=los_time,json=losTime,proto3" json:"los_time,omitempty"`
	// The latitude, in degrees, of the ground station's location.
	GroundStationLatitude float64 `protobuf:"fixed64,4,opt,name=ground_station_latitude,json=groundStationLatitude,proto3" json:"ground_station_latitude,omitempty"`
	// The longitude, in degrees, of the ground station's location.
	GroundStationLongitude float64 `protobuf:"fixed64,5,opt,name=ground_station_longitude,json=groundStationLongitude,proto3" json:"ground_station_longitude,omitempty"`
	// The ISO 3166-1 alpha-2 2-letter country code for the ground station's location.
	// See https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
	GroundStationCountryCode string `protobuf:"bytes,6,opt,name=ground_station_country_code,json=groundStationCountryCode,proto3" json:"ground_station_country_code,omitempty"`
	// The max elevation during the pass, in degrees.
	MaxElevationDegrees float64 `protobuf:"fixed64,7,opt,name=max_elevation_degrees,json=maxElevationDegrees,proto3" json:"max_elevation_degrees,omitempty"`
	// The time of the max elevation during the pass.
	MaxElevationTime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=max_elevation_time,json=maxElevationTime,proto3" json:"max_elevation_time,omitempty"`
	// The center frequency, in Hz, for downlinking in this pass. 0 if downlink is not available in
	// this pass.
	DownlinkCenterFrequencyHz uint64 `protobuf:"varint,9,opt,name=downlink_center_frequency_hz,json=downlinkCenterFrequencyHz,proto3" json:"downlink_center_frequency_hz,omitempty"`
	// The center frequency, in Hz, for uplinking in this pass. 0 if uplink is not available in
	// this pass.
	UplinkCenterFrequencyHz uint64   `protobuf:"varint,10,opt,name=uplink_center_frequency_hz,json=uplinkCenterFrequencyHz,proto3" json:"uplink_center_frequency_hz,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *Pass) Reset()         { *m = Pass{} }
func (m *Pass) String() string { return proto.CompactTextString(m) }
func (*Pass) ProtoMessage()    {}
func (*Pass) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{15}
}
func (m *Pass) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pass.Unmarshal(m, b)
}
func (m *Pass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pass.Marshal(b, m, deterministic)
}
func (dst *Pass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pass.Merge(dst, src)
}
func (m *Pass) XXX_Size() int {
	return xxx_messageInfo_Pass.Size(m)
}
func (m *Pass) XXX_DiscardUnknown() {
	xxx_messageInfo_Pass.DiscardUnknown(m)
}

var xxx_messageInfo_Pass proto.InternalMessageInfo

func (m *Pass) GetReservationToken() string {
	if m != nil {
		return m.ReservationToken
	}
	return ""
}

func (m *Pass) GetAosTime() *timestamp.Timestamp {
	if m != nil {
		return m.AosTime
	}
	return nil
}

func (m *Pass) GetLosTime() *timestamp.Timestamp {
	if m != nil {
		return m.LosTime
	}
	return nil
}

func (m *Pass) GetGroundStationLatitude() float64 {
	if m != nil {
		return m.GroundStationLatitude
	}
	return 0
}

func (m *Pass) GetGroundStationLongitude() float64 {
	if m != nil {
		return m.GroundStationLongitude
	}
	return 0
}

func (m *Pass) GetGroundStationCountryCode() string {
	if m != nil {
		return m.GroundStationCountryCode
	}
	return ""
}

func (m *Pass) GetMaxElevationDegrees() float64 {
	if m != nil {
		return m.MaxElevationDegrees
	}
	return 0
}

func (m *Pass) GetMaxElevationTime() *timestamp.Timestamp {
	if m != nil {
		return m.MaxElevationTime
	}
	return nil
}

func (m *Pass) GetDownlinkCenterFrequencyHz() uint64 {
	if m != nil {
		return m.DownlinkCenterFrequencyHz
	}
	return 0
}

func (m *Pass) GetUplinkCenterFrequencyHz() uint64 {
	if m != nil {
		return m.UplinkCenterFrequencyHz
	}
	return 0
}

// Metadata for telemetry downlinked during a pass.
type TelemetryMetadata struct {
	// URL of the data. This URL is valid for one hour after being returned.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The type of data received during downlinking.
	DataType             TelemetryMetadata_DataType `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=stellarstation.api.v1.TelemetryMetadata_DataType" json:"data_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TelemetryMetadata) Reset()         { *m = TelemetryMetadata{} }
func (m *TelemetryMetadata) String() string { return proto.CompactTextString(m) }
func (*TelemetryMetadata) ProtoMessage()    {}
func (*TelemetryMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{16}
}
func (m *TelemetryMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryMetadata.Unmarshal(m, b)
}
func (m *TelemetryMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryMetadata.Marshal(b, m, deterministic)
}
func (dst *TelemetryMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryMetadata.Merge(dst, src)
}
func (m *TelemetryMetadata) XXX_Size() int {
	return xxx_messageInfo_TelemetryMetadata.Size(m)
}
func (m *TelemetryMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryMetadata proto.InternalMessageInfo

func (m *TelemetryMetadata) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TelemetryMetadata) GetDataType() TelemetryMetadata_DataType {
	if m != nil {
		return m.DataType
	}
	return TelemetryMetadata_RAW
}

// A plan, specifying a time range within which a satellite will be communicated with.
//
// Next ID: 16
type Plan struct {
	// The unique ID of the plan.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The id of the satellite to be tracked in the plan.
	SatelliteId string `protobuf:"bytes,2,opt,name=satellite_id,json=satelliteId,proto3" json:"satellite_id,omitempty"`
	// The status of this plan.
	Status Plan_Status `protobuf:"varint,3,opt,name=status,proto3,enum=stellarstation.api.v1.Plan_Status" json:"status,omitempty"`
	// The start of the time window reserved for the plan. This value does not change over time.
	StartTime *timestamp.Timestamp `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end of the time window reserved for the plan. This value does not change over time.
	EndTime *timestamp.Timestamp `protobuf:"bytes,15,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The time of Acquisition of Signal (AOS) between the ground station and satellite in this plan.
	//
	// This value is never before 'start_time'. It may change over time (for example, if updated
	// TLE becomes available).
	AosTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=aos_time,json=aosTime,proto3" json:"aos_time,omitempty"`
	// The time of Loss of Signal (LOS) between the ground station and satellite in this plan.
	//
	// This value is never after 'end_time'. It may change over time (for example, if updated
	// TLE becomes available).
	LosTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=los_time,json=losTime,proto3" json:"los_time,omitempty"`
	// The latitude, in degrees, of the ground station's location.
	GroundStationLatitude float64 `protobuf:"fixed64,6,opt,name=ground_station_latitude,json=groundStationLatitude,proto3" json:"ground_station_latitude,omitempty"`
	// The longitude, in degrees, of the ground station's location.
	GroundStationLongitude float64 `protobuf:"fixed64,7,opt,name=ground_station_longitude,json=groundStationLongitude,proto3" json:"ground_station_longitude,omitempty"`
	// The ISO 3166-1 alpha-2 2-letter country code for the ground station's location.
	// See https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
	GroundStationCountryCode string `protobuf:"bytes,8,opt,name=ground_station_country_code,json=groundStationCountryCode,proto3" json:"ground_station_country_code,omitempty"`
	// The max elevation during the plan, in degrees.
	MaxElevationDegrees float64 `protobuf:"fixed64,9,opt,name=max_elevation_degrees,json=maxElevationDegrees,proto3" json:"max_elevation_degrees,omitempty"`
	// The time of the max elevation during the plan.
	MaxElevationTime *timestamp.Timestamp `protobuf:"bytes,10,opt,name=max_elevation_time,json=maxElevationTime,proto3" json:"max_elevation_time,omitempty"`
	// The center frequency, in Hz, for downlinking in this plan. 0 if downlink is not available in
	// this plan.
	DownlinkCenterFrequencyHz uint64 `protobuf:"varint,11,opt,name=downlink_center_frequency_hz,json=downlinkCenterFrequencyHz,proto3" json:"downlink_center_frequency_hz,omitempty"`
	// The center frequency, in Hz, for uplinking in this plan. 0 if uplink is not available in
	// this plan.
	UplinkCenterFrequencyHz uint64 `protobuf:"varint,12,opt,name=uplink_center_frequency_hz,json=uplinkCenterFrequencyHz,proto3" json:"uplink_center_frequency_hz,omitempty"`
	// Metadata for telemetry received during the pass. Only populated when the pass has completed
	// successfully and data processing is complete.
	TelmetryMetadata     []*TelemetryMetadata `protobuf:"bytes,13,rep,name=telmetry_metadata,json=telmetryMetadata,proto3" json:"telmetry_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Plan) Reset()         { *m = Plan{} }
func (m *Plan) String() string { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()    {}
func (*Plan) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{17}
}
func (m *Plan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Plan.Unmarshal(m, b)
}
func (m *Plan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Plan.Marshal(b, m, deterministic)
}
func (dst *Plan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plan.Merge(dst, src)
}
func (m *Plan) XXX_Size() int {
	return xxx_messageInfo_Plan.Size(m)
}
func (m *Plan) XXX_DiscardUnknown() {
	xxx_messageInfo_Plan.DiscardUnknown(m)
}

var xxx_messageInfo_Plan proto.InternalMessageInfo

func (m *Plan) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Plan) GetSatelliteId() string {
	if m != nil {
		return m.SatelliteId
	}
	return ""
}

func (m *Plan) GetStatus() Plan_Status {
	if m != nil {
		return m.Status
	}
	return Plan_RESERVED
}

func (m *Plan) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Plan) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Plan) GetAosTime() *timestamp.Timestamp {
	if m != nil {
		return m.AosTime
	}
	return nil
}

func (m *Plan) GetLosTime() *timestamp.Timestamp {
	if m != nil {
		return m.LosTime
	}
	return nil
}

func (m *Plan) GetGroundStationLatitude() float64 {
	if m != nil {
		return m.GroundStationLatitude
	}
	return 0
}

func (m *Plan) GetGroundStationLongitude() float64 {
	if m != nil {
		return m.GroundStationLongitude
	}
	return 0
}

func (m *Plan) GetGroundStationCountryCode() string {
	if m != nil {
		return m.GroundStationCountryCode
	}
	return ""
}

func (m *Plan) GetMaxElevationDegrees() float64 {
	if m != nil {
		return m.MaxElevationDegrees
	}
	return 0
}

func (m *Plan) GetMaxElevationTime() *timestamp.Timestamp {
	if m != nil {
		return m.MaxElevationTime
	}
	return nil
}

func (m *Plan) GetDownlinkCenterFrequencyHz() uint64 {
	if m != nil {
		return m.DownlinkCenterFrequencyHz
	}
	return 0
}

func (m *Plan) GetUplinkCenterFrequencyHz() uint64 {
	if m != nil {
		return m.UplinkCenterFrequencyHz
	}
	return 0
}

func (m *Plan) GetTelmetryMetadata() []*TelemetryMetadata {
	if m != nil {
		return m.TelmetryMetadata
	}
	return nil
}

// Request for the 'AddTle' method.
type AddTleRequest struct {
	// The ID of the satellite to add TLE for. The ID can be found on the StellarStation
	// Console page for the satellite.
	SatelliteId string `protobuf:"bytes,1,opt,name=satellite_id,json=satelliteId,proto3" json:"satellite_id,omitempty"`
	// The TLE to be added.
	Tle                  *orbit.Tle `protobuf:"bytes,2,opt,name=tle,proto3" json:"tle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AddTleRequest) Reset()         { *m = AddTleRequest{} }
func (m *AddTleRequest) String() string { return proto.CompactTextString(m) }
func (*AddTleRequest) ProtoMessage()    {}
func (*AddTleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{18}
}
func (m *AddTleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddTleRequest.Unmarshal(m, b)
}
func (m *AddTleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddTleRequest.Marshal(b, m, deterministic)
}
func (dst *AddTleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTleRequest.Merge(dst, src)
}
func (m *AddTleRequest) XXX_Size() int {
	return xxx_messageInfo_AddTleRequest.Size(m)
}
func (m *AddTleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddTleRequest proto.InternalMessageInfo

func (m *AddTleRequest) GetSatelliteId() string {
	if m != nil {
		return m.SatelliteId
	}
	return ""
}

func (m *AddTleRequest) GetTle() *orbit.Tle {
	if m != nil {
		return m.Tle
	}
	return nil
}

// Response for the `AddTle` method.
type AddTleResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddTleResponse) Reset()         { *m = AddTleResponse{} }
func (m *AddTleResponse) String() string { return proto.CompactTextString(m) }
func (*AddTleResponse) ProtoMessage()    {}
func (*AddTleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{19}
}
func (m *AddTleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddTleResponse.Unmarshal(m, b)
}
func (m *AddTleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddTleResponse.Marshal(b, m, deterministic)
}
func (dst *AddTleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTleResponse.Merge(dst, src)
}
func (m *AddTleResponse) XXX_Size() int {
	return xxx_messageInfo_AddTleResponse.Size(m)
}
func (m *AddTleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddTleResponse proto.InternalMessageInfo

// Request for the 'GetTle' method.
type GetTleRequest struct {
	// The ID of the satellite for which to fetch TLE. The ID can be found on the StellarStation
	// Console page for the satellite.
	SatelliteId          string   `protobuf:"bytes,1,opt,name=satellite_id,json=satelliteId,proto3" json:"satellite_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTleRequest) Reset()         { *m = GetTleRequest{} }
func (m *GetTleRequest) String() string { return proto.CompactTextString(m) }
func (*GetTleRequest) ProtoMessage()    {}
func (*GetTleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{20}
}
func (m *GetTleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTleRequest.Unmarshal(m, b)
}
func (m *GetTleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTleRequest.Marshal(b, m, deterministic)
}
func (dst *GetTleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTleRequest.Merge(dst, src)
}
func (m *GetTleRequest) XXX_Size() int {
	return xxx_messageInfo_GetTleRequest.Size(m)
}
func (m *GetTleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTleRequest proto.InternalMessageInfo

func (m *GetTleRequest) GetSatelliteId() string {
	if m != nil {
		return m.SatelliteId
	}
	return ""
}

// Response for the 'GetTle' method.
type GetTleResponse struct {
	// The TLE for the given satellite.
	Tle                  *orbit.Tle `protobuf:"bytes,1,opt,name=tle,proto3" json:"tle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetTleResponse) Reset()         { *m = GetTleResponse{} }
func (m *GetTleResponse) String() string { return proto.CompactTextString(m) }
func (*GetTleResponse) ProtoMessage()    {}
func (*GetTleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_stellarstation_756d0f72c09d08b6, []int{21}
}
func (m *GetTleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTleResponse.Unmarshal(m, b)
}
func (m *GetTleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTleResponse.Marshal(b, m, deterministic)
}
func (dst *GetTleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTleResponse.Merge(dst, src)
}
func (m *GetTleResponse) XXX_Size() int {
	return xxx_messageInfo_GetTleResponse.Size(m)
}
func (m *GetTleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTleResponse proto.InternalMessageInfo

func (m *GetTleResponse) GetTle() *orbit.Tle {
	if m != nil {
		return m.Tle
	}
	return nil
}

func init() {
	proto.RegisterType((*SatelliteStreamRequest)(nil), "stellarstation.api.v1.SatelliteStreamRequest")
	proto.RegisterType((*SendSatelliteCommandsRequest)(nil), "stellarstation.api.v1.SendSatelliteCommandsRequest")
	proto.RegisterType((*SatelliteStreamResponse)(nil), "stellarstation.api.v1.SatelliteStreamResponse")
	proto.RegisterType((*ReceiveTelemetryResponse)(nil), "stellarstation.api.v1.ReceiveTelemetryResponse")
	proto.RegisterType((*Telemetry)(nil), "stellarstation.api.v1.Telemetry")
	proto.RegisterType((*PlanMonitoringEvent)(nil), "stellarstation.api.v1.PlanMonitoringEvent")
	proto.RegisterType((*StreamEvent)(nil), "stellarstation.api.v1.StreamEvent")
	proto.RegisterType((*StreamEvent_CommandSentFromGroundStation)(nil), "stellarstation.api.v1.StreamEvent.CommandSentFromGroundStation")
	proto.RegisterType((*CancelPlanRequest)(nil), "stellarstation.api.v1.CancelPlanRequest")
	proto.RegisterType((*CancelPlanResponse)(nil), "stellarstation.api.v1.CancelPlanResponse")
	proto.RegisterType((*ListUpcomingAvailablePassesRequest)(nil), "stellarstation.api.v1.ListUpcomingAvailablePassesRequest")
	proto.RegisterType((*ListUpcomingAvailablePassesResponse)(nil), "stellarstation.api.v1.ListUpcomingAvailablePassesResponse")
	proto.RegisterType((*ReservePassRequest)(nil), "stellarstation.api.v1.ReservePassRequest")
	proto.RegisterType((*ReservePassResponse)(nil), "stellarstation.api.v1.ReservePassResponse")
	proto.RegisterType((*ListPlansRequest)(nil), "stellarstation.api.v1.ListPlansRequest")
	proto.RegisterType((*ListPlansResponse)(nil), "stellarstation.api.v1.ListPlansResponse")
	proto.RegisterType((*Pass)(nil), "stellarstation.api.v1.Pass")
	proto.RegisterType((*TelemetryMetadata)(nil), "stellarstation.api.v1.TelemetryMetadata")
	proto.RegisterType((*Plan)(nil), "stellarstation.api.v1.Plan")
	proto.RegisterType((*AddTleRequest)(nil), "stellarstation.api.v1.AddTleRequest")
	proto.RegisterType((*AddTleResponse)(nil), "stellarstation.api.v1.AddTleResponse")
	proto.RegisterType((*GetTleRequest)(nil), "stellarstation.api.v1.GetTleRequest")
	proto.RegisterType((*GetTleResponse)(nil), "stellarstation.api.v1.GetTleResponse")
	proto.RegisterEnum("stellarstation.api.v1.Framing", Framing_name, Framing_value)
	proto.RegisterEnum("stellarstation.api.v1.TelemetryMetadata_DataType", TelemetryMetadata_DataType_name, TelemetryMetadata_DataType_value)
	proto.RegisterEnum("stellarstation.api.v1.Plan_Status", Plan_Status_name, Plan_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StellarStationServiceClient is the client API for StellarStationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StellarStationServiceClient interface {
	// Lists the plans for a particular satellite.
	//
	// The request will be closed with an `INVALID_ARGUMENT` status if `satellite_id`,
	// `aos_after`, or `aos_before` are missing, or the duration between the two times is longer than
	// 31 days.
	ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*ListPlansResponse, error)
	// Cancel a previously reserved upcoming plan. Cancelling the plan will cause it to not be
	// executed. This action cannot be undone, but it is still possible to reserve the corresponding
	// pass again by calling `ListUpcomingAvailablePasses` and `ReservePass` as usual - this will
	// cause a new plan to be reserved. The plan cannot be cancelled less than ten minutes before
	// AOS.
	//
	// Canceling a plan may incur a charge based on the time left to AOS. See our cancellation policy
	// for details.
	//
	// If the plan is not found, the request will return a `NOT_FOUND` error.
	//
	// If the plan has already been canceled or is less than ten minutes away from its AOS, the
	// request will return a `FAILED_PRECONDITION` error.
	//
	// If the plan is ongoing or has already finished executing, the request will return a
	// `OUT_OF_RANGE` error.
	CancelPlan(ctx context.Context, in *CancelPlanRequest, opts ...grpc.CallOption) (*CancelPlanResponse, error)
	// Lists upcoming passes for a satellite. Passes that can be scheduled for the satellite with an
	// Acquisition of Signal (AOS) within 14 days from now will be returned. This method does not
	// reserve passes in any way - it is possible for a pass that is returned by this method to be
	// unschedulable when actually trying to schedule because a conflict appeared during that time.
	//
	// If the satellite is not found or the client is not authorized for it, the request will return
	// a `NOT_FOUND` error.
	ListUpcomingAvailablePasses(ctx context.Context, in *ListUpcomingAvailablePassesRequest, opts ...grpc.CallOption) (*ListUpcomingAvailablePassesResponse, error)
	// Open a stream to a satellite. The returned stream is bi-directional - it can be used by the
	// client to send commands to the satellite and data received from the satellite will be returned
	// as it is made available. All telemetry received from the satellite on reserved passes along
	// with associated events from this point on will be returned as soon as this method is called. If
	// `SatelliteStreamRequest.stream_id` is specified, any messages that have been buffered for the
	// stream will be returned as well.
	//
	// The first `SatelliteStreamRequest` sent on the stream is used for configuring the stream.
	// Unless otherwise specified, all configuration is taken from the first request and configuration
	// values in subsequent requests will be ignored.
	//
	// The stream can be left open for any amount of time and telemetry will be received as available
	// and returned. When the client is done with the stream, it should close it successfully. If the
	// stream is cancelled with an unexpected error at any point, telemetry received before the next
	// call to `OpenSatelliteStream` to resume the stream will be buffered up to 1 minute, and if no
	// call to `OpenSatelliteStream` is made with `stream_id` specified to resume the stream, it will
	// expire in 10 minutes and a call to `OpenSatelliteStream` with that `stream_id` will be closed
	// with a `ABORTED` error.
	//
	// If the satellite is not found or the client is not authorized for it, the stream will be closed
	// with a `NOT_FOUND` error.
	OpenSatelliteStream(ctx context.Context, opts ...grpc.CallOption) (StellarStationService_OpenSatelliteStreamClient, error)
	// Reserves a pass for later execution as a plan. The pass must be specified by a
	// `reservation_token` returned in another method like `ListUpcomingAvailablePasses` and its
	// `aos_time` must be at least one hour in the future.
	//
	// If the `reservation_token` is invalid, the request will return an `INVALID_ARGUMENT` error.
	//
	// If the requested pass cannot be scheduled due to a conflict with existing plans or other
	// scheduling constraints, the request will return a `FAILED_PRECONDITION` error. This includes
	// if the pass `aos_time` is less than one hour in the future.
	//
	// Note that the reservation_token may have become unreservable since it was fetched. If that's
	// the case, the call to `ReservePass` will fail with a 'FAILED_PRECONDITION' error and
	// `ListUpcomingAvailablePasses` should be called again to get a fresh list of reservable passes.
	// The pass must be scheduled at least one hour in advance of `aos_time` or it will be rejected.
	ReservePass(ctx context.Context, in *ReservePassRequest, opts ...grpc.CallOption) (*ReservePassResponse, error)
	// Adds TLE for a satellite.
	//
	// The TLE will be used for satellite orbit calculation until it is superseded by a TLE with a
	// more recent epoch. This happens automatically if StellarStation pulls new TLE data from
	// external sources, or manually through this API etc.
	//
	// An 'INVALID_ARGUMENT' error will be returned in the following conditions:
	// - the TLE cannot be parsed
	// - the TLE epoch is in the future
	// - the TLE epoch is older than the most recent TLE known to StellarStation
	// - the TLE norad ID does not correspond to the requested satellite.
	//
	// If the satellite is not found or the client is not authorized for it, the request will return
	// a `NOT_FOUND` error.
	AddTle(ctx context.Context, in *AddTleRequest, opts ...grpc.CallOption) (*AddTleResponse, error)
	// Gets the TLE for a satellite.
	//
	// The returned TLE will be the one that has the latest epoch known to StellarStation, and is
	// used when calculating satellite orbits.
	//
	// If the satellite is not found or the client is not authorized for it, the request will return
	// a `NOT_FOUND` error.
	GetTle(ctx context.Context, in *GetTleRequest, opts ...grpc.CallOption) (*GetTleResponse, error)
}

type stellarStationServiceClient struct {
	cc *grpc.ClientConn
}

func NewStellarStationServiceClient(cc *grpc.ClientConn) StellarStationServiceClient {
	return &stellarStationServiceClient{cc}
}

func (c *stellarStationServiceClient) ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*ListPlansResponse, error) {
	out := new(ListPlansResponse)
	err := c.cc.Invoke(ctx, "/stellarstation.api.v1.StellarStationService/ListPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stellarStationServiceClient) CancelPlan(ctx context.Context, in *CancelPlanRequest, opts ...grpc.CallOption) (*CancelPlanResponse, error) {
	out := new(CancelPlanResponse)
	err := c.cc.Invoke(ctx, "/stellarstation.api.v1.StellarStationService/CancelPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stellarStationServiceClient) ListUpcomingAvailablePasses(ctx context.Context, in *ListUpcomingAvailablePassesRequest, opts ...grpc.CallOption) (*ListUpcomingAvailablePassesResponse, error) {
	out := new(ListUpcomingAvailablePassesResponse)
	err := c.cc.Invoke(ctx, "/stellarstation.api.v1.StellarStationService/ListUpcomingAvailablePasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stellarStationServiceClient) OpenSatelliteStream(ctx context.Context, opts ...grpc.CallOption) (StellarStationService_OpenSatelliteStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StellarStationService_serviceDesc.Streams[0], "/stellarstation.api.v1.StellarStationService/OpenSatelliteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &stellarStationServiceOpenSatelliteStreamClient{stream}
	return x, nil
}

type StellarStationService_OpenSatelliteStreamClient interface {
	Send(*SatelliteStreamRequest) error
	Recv() (*SatelliteStreamResponse, error)
	grpc.ClientStream
}

type stellarStationServiceOpenSatelliteStreamClient struct {
	grpc.ClientStream
}

func (x *stellarStationServiceOpenSatelliteStreamClient) Send(m *SatelliteStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stellarStationServiceOpenSatelliteStreamClient) Recv() (*SatelliteStreamResponse, error) {
	m := new(SatelliteStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stellarStationServiceClient) ReservePass(ctx context.Context, in *ReservePassRequest, opts ...grpc.CallOption) (*ReservePassResponse, error) {
	out := new(ReservePassResponse)
	err := c.cc.Invoke(ctx, "/stellarstation.api.v1.StellarStationService/ReservePass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stellarStationServiceClient) AddTle(ctx context.Context, in *AddTleRequest, opts ...grpc.CallOption) (*AddTleResponse, error) {
	out := new(AddTleResponse)
	err := c.cc.Invoke(ctx, "/stellarstation.api.v1.StellarStationService/AddTle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stellarStationServiceClient) GetTle(ctx context.Context, in *GetTleRequest, opts ...grpc.CallOption) (*GetTleResponse, error) {
	out := new(GetTleResponse)
	err := c.cc.Invoke(ctx, "/stellarstation.api.v1.StellarStationService/GetTle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StellarStationServiceServer is the server API for StellarStationService service.
type StellarStationServiceServer interface {
	// Lists the plans for a particular satellite.
	//
	// The request will be closed with an `INVALID_ARGUMENT` status if `satellite_id`,
	// `aos_after`, or `aos_before` are missing, or the duration between the two times is longer than
	// 31 days.
	ListPlans(context.Context, *ListPlansRequest) (*ListPlansResponse, error)
	// Cancel a previously reserved upcoming plan. Cancelling the plan will cause it to not be
	// executed. This action cannot be undone, but it is still possible to reserve the corresponding
	// pass again by calling `ListUpcomingAvailablePasses` and `ReservePass` as usual - this will
	// cause a new plan to be reserved. The plan cannot be cancelled less than ten minutes before
	// AOS.
	//
	// Canceling a plan may incur a charge based on the time left to AOS. See our cancellation policy
	// for details.
	//
	// If the plan is not found, the request will return a `NOT_FOUND` error.
	//
	// If the plan has already been canceled or is less than ten minutes away from its AOS, the
	// request will return a `FAILED_PRECONDITION` error.
	//
	// If the plan is ongoing or has already finished executing, the request will return a
	// `OUT_OF_RANGE` error.
	CancelPlan(context.Context, *CancelPlanRequest) (*CancelPlanResponse, error)
	// Lists upcoming passes for a satellite. Passes that can be scheduled for the satellite with an
	// Acquisition of Signal (AOS) within 14 days from now will be returned. This method does not
	// reserve passes in any way - it is possible for a pass that is returned by this method to be
	// unschedulable when actually trying to schedule because a conflict appeared during that time.
	//
	// If the satellite is not found or the client is not authorized for it, the request will return
	// a `NOT_FOUND` error.
	ListUpcomingAvailablePasses(context.Context, *ListUpcomingAvailablePassesRequest) (*ListUpcomingAvailablePassesResponse, error)
	// Open a stream to a satellite. The returned stream is bi-directional - it can be used by the
	// client to send commands to the satellite and data received from the satellite will be returned
	// as it is made available. All telemetry received from the satellite on reserved passes along
	// with associated events from this point on will be returned as soon as this method is called. If
	// `SatelliteStreamRequest.stream_id` is specified, any messages that have been buffered for the
	// stream will be returned as well.
	//
	// The first `SatelliteStreamRequest` sent on the stream is used for configuring the stream.
	// Unless otherwise specified, all configuration is taken from the first request and configuration
	// values in subsequent requests will be ignored.
	//
	// The stream can be left open for any amount of time and telemetry will be received as available
	// and returned. When the client is done with the stream, it should close it successfully. If the
	// stream is cancelled with an unexpected error at any point, telemetry received before the next
	// call to `OpenSatelliteStream` to resume the stream will be buffered up to 1 minute, and if no
	// call to `OpenSatelliteStream` is made with `stream_id` specified to resume the stream, it will
	// expire in 10 minutes and a call to `OpenSatelliteStream` with that `stream_id` will be closed
	// with a `ABORTED` error.
	//
	// If the satellite is not found or the client is not authorized for it, the stream will be closed
	// with a `NOT_FOUND` error.
	OpenSatelliteStream(StellarStationService_OpenSatelliteStreamServer) error
	// Reserves a pass for later execution as a plan. The pass must be specified by a
	// `reservation_token` returned in another method like `ListUpcomingAvailablePasses` and its
	// `aos_time` must be at least one hour in the future.
	//
	// If the `reservation_token` is invalid, the request will return an `INVALID_ARGUMENT` error.
	//
	// If the requested pass cannot be scheduled due to a conflict with existing plans or other
	// scheduling constraints, the request will return a `FAILED_PRECONDITION` error. This includes
	// if the pass `aos_time` is less than one hour in the future.
	//
	// Note that the reservation_token may have become unreservable since it was fetched. If that's
	// the case, the call to `ReservePass` will fail with a 'FAILED_PRECONDITION' error and
	// `ListUpcomingAvailablePasses` should be called again to get a fresh list of reservable passes.
	// The pass must be scheduled at least one hour in advance of `aos_time` or it will be rejected.
	ReservePass(context.Context, *ReservePassRequest) (*ReservePassResponse, error)
	// Adds TLE for a satellite.
	//
	// The TLE will be used for satellite orbit calculation until it is superseded by a TLE with a
	// more recent epoch. This happens automatically if StellarStation pulls new TLE data from
	// external sources, or manually through this API etc.
	//
	// An 'INVALID_ARGUMENT' error will be returned in the following conditions:
	// - the TLE cannot be parsed
	// - the TLE epoch is in the future
	// - the TLE epoch is older than the most recent TLE known to StellarStation
	// - the TLE norad ID does not correspond to the requested satellite.
	//
	// If the satellite is not found or the client is not authorized for it, the request will return
	// a `NOT_FOUND` error.
	AddTle(context.Context, *AddTleRequest) (*AddTleResponse, error)
	// Gets the TLE for a satellite.
	//
	// The returned TLE will be the one that has the latest epoch known to StellarStation, and is
	// used when calculating satellite orbits.
	//
	// If the satellite is not found or the client is not authorized for it, the request will return
	// a `NOT_FOUND` error.
	GetTle(context.Context, *GetTleRequest) (*GetTleResponse, error)
}

func RegisterStellarStationServiceServer(s *grpc.Server, srv StellarStationServiceServer) {
	s.RegisterService(&_StellarStationService_serviceDesc, srv)
}

func _StellarStationService_ListPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StellarStationServiceServer).ListPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellarstation.api.v1.StellarStationService/ListPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StellarStationServiceServer).ListPlans(ctx, req.(*ListPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StellarStationService_CancelPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StellarStationServiceServer).CancelPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellarstation.api.v1.StellarStationService/CancelPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StellarStationServiceServer).CancelPlan(ctx, req.(*CancelPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StellarStationService_ListUpcomingAvailablePasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUpcomingAvailablePassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StellarStationServiceServer).ListUpcomingAvailablePasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellarstation.api.v1.StellarStationService/ListUpcomingAvailablePasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StellarStationServiceServer).ListUpcomingAvailablePasses(ctx, req.(*ListUpcomingAvailablePassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StellarStationService_OpenSatelliteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StellarStationServiceServer).OpenSatelliteStream(&stellarStationServiceOpenSatelliteStreamServer{stream})
}

type StellarStationService_OpenSatelliteStreamServer interface {
	Send(*SatelliteStreamResponse) error
	Recv() (*SatelliteStreamRequest, error)
	grpc.ServerStream
}

type stellarStationServiceOpenSatelliteStreamServer struct {
	grpc.ServerStream
}

func (x *stellarStationServiceOpenSatelliteStreamServer) Send(m *SatelliteStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stellarStationServiceOpenSatelliteStreamServer) Recv() (*SatelliteStreamRequest, error) {
	m := new(SatelliteStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StellarStationService_ReservePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservePassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StellarStationServiceServer).ReservePass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellarstation.api.v1.StellarStationService/ReservePass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StellarStationServiceServer).ReservePass(ctx, req.(*ReservePassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StellarStationService_AddTle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StellarStationServiceServer).AddTle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellarstation.api.v1.StellarStationService/AddTle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StellarStationServiceServer).AddTle(ctx, req.(*AddTleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StellarStationService_GetTle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StellarStationServiceServer).GetTle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stellarstation.api.v1.StellarStationService/GetTle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StellarStationServiceServer).GetTle(ctx, req.(*GetTleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StellarStationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stellarstation.api.v1.StellarStationService",
	HandlerType: (*StellarStationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPlans",
			Handler:    _StellarStationService_ListPlans_Handler,
		},
		{
			MethodName: "CancelPlan",
			Handler:    _StellarStationService_CancelPlan_Handler,
		},
		{
			MethodName: "ListUpcomingAvailablePasses",
			Handler:    _StellarStationService_ListUpcomingAvailablePasses_Handler,
		},
		{
			MethodName: "ReservePass",
			Handler:    _StellarStationService_ReservePass_Handler,
		},
		{
			MethodName: "AddTle",
			Handler:    _StellarStationService_AddTle_Handler,
		},
		{
			MethodName: "GetTle",
			Handler:    _StellarStationService_GetTle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenSatelliteStream",
			Handler:       _StellarStationService_OpenSatelliteStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stellarstation/api/v1/stellarstation.proto",
}

func init() {
	proto.RegisterFile("stellarstation/api/v1/stellarstation.proto", fileDescriptor_stellarstation_756d0f72c09d08b6)
}

var fileDescriptor_stellarstation_756d0f72c09d08b6 = []byte{
	// 1771 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcb, 0x72, 0xe3, 0xc6,
	0x15, 0x25, 0xf8, 0xe6, 0x25, 0xc5, 0x81, 0x5a, 0x23, 0x8b, 0xa6, 0x14, 0x5b, 0x86, 0x93, 0x32,
	0x3d, 0x89, 0xc9, 0x88, 0x8e, 0x93, 0xb1, 0xf3, 0x70, 0xf1, 0x01, 0x3e, 0x52, 0xd2, 0x8c, 0x0c,
	0x52, 0xf6, 0x94, 0x17, 0x46, 0x5a, 0x44, 0x93, 0x42, 0x19, 0x04, 0x18, 0xa0, 0xa9, 0x8c, 0x5c,
	0x59, 0xe4, 0x07, 0xb2, 0xcb, 0x36, 0xfb, 0xe4, 0x13, 0xf2, 0x13, 0x59, 0xe7, 0x33, 0xf2, 0x01,
	0xa9, 0x4a, 0xaa, 0x1b, 0x0d, 0xbe, 0x41, 0x4a, 0x9a, 0x78, 0x23, 0x11, 0xf7, 0xde, 0x73, 0x5f,
	0xdd, 0xe7, 0x76, 0x03, 0xf0, 0xcc, 0xa3, 0xc4, 0xb2, 0xb0, 0xeb, 0x51, 0x4c, 0x4d, 0xc7, 0xae,
	0xe0, 0x89, 0x59, 0xb9, 0x3d, 0xab, 0x2c, 0x4b, 0xcb, 0x13, 0xd7, 0xa1, 0x0e, 0x3a, 0x5c, 0x91,
	0xe2, 0x89, 0x59, 0xbe, 0x3d, 0x2b, 0xbe, 0x3b, 0x72, 0x9c, 0x91, 0x45, 0x2a, 0xdc, 0xe8, 0x7a,
	0x3a, 0xac, 0x50, 0x73, 0x4c, 0x3c, 0x8a, 0xc7, 0x13, 0x1f, 0x57, 0x3c, 0xdb, 0x1c, 0x63, 0xec,
	0xd8, 0x26, 0x75, 0x5c, 0xd3, 0x1e, 0x2d, 0xfc, 0x14, 0x90, 0x0f, 0x36, 0x43, 0x1c, 0xf7, 0xda,
	0xa4, 0xfe, 0x5f, 0xdf, 0x50, 0xf9, 0x77, 0x14, 0xde, 0xea, 0x61, 0x66, 0x6c, 0x52, 0xd2, 0xa3,
	0x2e, 0xc1, 0x63, 0x8d, 0xfc, 0x7e, 0x4a, 0x3c, 0x8a, 0xde, 0x83, 0x9c, 0x17, 0x68, 0x74, 0xd3,
	0x28, 0x48, 0xa7, 0x52, 0x29, 0xa3, 0x65, 0x67, 0xb2, 0xae, 0x81, 0x8e, 0x21, 0xe3, 0x71, 0x0c,
	0xd3, 0x47, 0xb9, 0x3e, 0xed, 0x0b, 0xba, 0x06, 0x7a, 0x1f, 0xf6, 0x88, 0x8d, 0xaf, 0x2d, 0xa2,
	0x93, 0x5b, 0x62, 0x53, 0xaf, 0x90, 0x38, 0x95, 0x4a, 0x69, 0x2d, 0xe7, 0x0b, 0x55, 0x2e, 0x43,
	0x3f, 0x00, 0x70, 0xfd, 0x78, 0xcc, 0x45, 0x92, 0xbb, 0xc8, 0x08, 0x49, 0xd7, 0x40, 0x7f, 0x84,
	0x77, 0x3d, 0x62, 0x1b, 0xfa, 0x3c, 0x91, 0x81, 0x33, 0x1e, 0x63, 0xdb, 0xf0, 0x74, 0x61, 0x54,
	0x88, 0x9d, 0x4a, 0xa5, 0x6c, 0xf5, 0xe3, 0xf2, 0xc6, 0xe6, 0x96, 0x7b, 0xc4, 0x36, 0x66, 0xf5,
	0x35, 0x04, 0x56, 0x54, 0xd8, 0x89, 0x68, 0x27, 0xde, 0x16, 0x3d, 0xea, 0x82, 0x8c, 0x07, 0x03,
	0x32, 0xa1, 0xc4, 0xd0, 0x87, 0x2e, 0x1e, 0x9b, 0xf6, 0xa8, 0x10, 0x3f, 0x8d, 0x95, 0xf2, 0xd5,
	0x77, 0x42, 0xc2, 0xb5, 0x7c, 0x2b, 0xed, 0x49, 0x80, 0x13, 0x82, 0x7a, 0x06, 0x52, 0xc2, 0xab,
	0xf2, 0x1c, 0x4e, 0xb6, 0x65, 0x85, 0x0a, 0x90, 0x12, 0x45, 0x16, 0xa2, 0xa7, 0xb1, 0x52, 0x4e,
	0x0b, 0x1e, 0x95, 0xff, 0x48, 0x70, 0xb4, 0xb6, 0x58, 0xde, 0xc4, 0xb1, 0x3d, 0xb2, 0xbc, 0x14,
	0xd2, 0xca, 0x52, 0x38, 0x50, 0x74, 0xc9, 0x80, 0x98, 0xb7, 0x44, 0xa7, 0xc4, 0x22, 0x63, 0x42,
	0xdd, 0x3b, 0xdd, 0x15, 0x50, 0xbe, 0x70, 0xd9, 0x6a, 0x25, 0xa4, 0x24, 0xcd, 0x07, 0xf6, 0x03,
	0x5c, 0x10, 0xb1, 0x13, 0xd1, 0x0a, 0x6e, 0x88, 0x0e, 0xb5, 0x21, 0x27, 0xb2, 0xe1, 0x6b, 0x2f,
	0x16, 0x49, 0x09, 0x5b, 0x24, 0x6e, 0xca, 0x77, 0x44, 0x27, 0xa2, 0x65, 0xbd, 0xf9, 0x63, 0x1d,
	0x20, 0x1d, 0x38, 0x55, 0xbe, 0x86, 0x42, 0x58, 0x32, 0xe8, 0x37, 0x90, 0x99, 0x55, 0xc6, 0xcb,
	0xcf, 0x56, 0x4f, 0x43, 0xa2, 0xcd, 0xc1, 0x73, 0x88, 0xf2, 0xaf, 0x28, 0x64, 0x66, 0x0a, 0xf4,
	0x1c, 0x52, 0xc1, 0x7a, 0x33, 0x5f, 0xbb, 0xd7, 0x3b, 0x30, 0x47, 0x08, 0xe2, 0x06, 0xa6, 0x98,
	0xf7, 0x34, 0xa7, 0xf1, 0xdf, 0xa8, 0x0a, 0x87, 0x86, 0xf3, 0x07, 0xdb, 0x32, 0xed, 0x6f, 0xf5,
	0x21, 0xdf, 0xb6, 0xf6, 0xe0, 0x4e, 0xbf, 0xf9, 0x8e, 0x77, 0x25, 0xae, 0x1d, 0x04, 0xca, 0x56,
	0xa0, 0xeb, 0x7c, 0x87, 0x7a, 0x50, 0x60, 0x63, 0x40, 0x1f, 0x9a, 0xae, 0x47, 0xf5, 0xeb, 0x3b,
	0x4a, 0x74, 0xd1, 0x6c, 0xa3, 0x10, 0xe7, 0xe5, 0x15, 0xcb, 0xfe, 0xdc, 0x28, 0x07, 0x73, 0xa3,
	0xdc, 0x0f, 0xe6, 0x86, 0x76, 0xc8, 0xb0, 0x2d, 0x06, 0xad, 0xdf, 0x51, 0x22, 0x9a, 0x66, 0xa0,
	0x2f, 0xe0, 0x88, 0x3b, 0xb5, 0xf0, 0x9a, 0xcf, 0xc4, 0x4e, 0x9f, 0x4f, 0x19, 0xf4, 0x1c, 0xaf,
	0xb8, 0x7c, 0x0f, 0x72, 0xac, 0x74, 0xa2, 0xdf, 0x10, 0x6c, 0x10, 0x97, 0x33, 0x38, 0xa7, 0x65,
	0xb9, 0xac, 0xc3, 0x45, 0xca, 0x9f, 0x63, 0x70, 0x70, 0x69, 0x61, 0xfb, 0x62, 0x36, 0xa4, 0xf8,
	0xd2, 0xa2, 0x23, 0x48, 0x4d, 0x2c, 0x6c, 0xcf, 0xf7, 0x6b, 0x92, 0x3d, 0x76, 0x0d, 0xf4, 0x27,
	0x09, 0x4e, 0x46, 0xae, 0x33, 0x65, 0xbc, 0xf7, 0xdb, 0xad, 0x0f, 0x1c, 0x7b, 0x68, 0x8e, 0xa6,
	0x2e, 0x7f, 0x12, 0x1b, 0xf6, 0x57, 0x21, 0x6b, 0xb2, 0x30, 0x0c, 0xdb, 0xdc, 0x4b, 0xcf, 0xd7,
	0x37, 0x16, 0x7d, 0x74, 0x22, 0x5a, 0x71, 0x14, 0xaa, 0x45, 0x37, 0xf0, 0x74, 0x25, 0x03, 0xf6,
	0x9f, 0x88, 0x7d, 0xfc, 0xb3, 0x07, 0x46, 0x66, 0xff, 0x18, 0x5f, 0xd0, 0x68, 0x4d, 0xba, 0x21,
	0x92, 0xcf, 0x98, 0xf8, 0xa3, 0x22, 0x05, 0x1c, 0x5a, 0x8e, 0xe4, 0x53, 0x29, 0x09, 0xf1, 0xae,
	0x3d, 0x74, 0x94, 0xbf, 0x46, 0x21, 0xbb, 0xc0, 0xb8, 0x95, 0x11, 0x2c, 0xad, 0x8e, 0x60, 0x03,
	0x72, 0x62, 0xfe, 0xe8, 0x1e, 0x4b, 0xcc, 0x6f, 0xfe, 0xe7, 0xbb, 0xa9, 0x5c, 0x16, 0x83, 0xad,
	0x47, 0x6c, 0xda, 0x72, 0x9d, 0xf1, 0x52, 0xa2, 0x8c, 0xe7, 0x83, 0xb9, 0x1e, 0xfd, 0x0e, 0x0e,
	0xf9, 0x66, 0x98, 0x17, 0xb6, 0x34, 0x39, 0x9e, 0x85, 0x84, 0xdb, 0xb0, 0xaf, 0x3a, 0x11, 0xed,
	0x60, 0xb2, 0x2e, 0x2e, 0xbe, 0x03, 0x27, 0xdb, 0x12, 0xaa, 0xa7, 0x20, 0xc1, 0x0d, 0x95, 0x9f,
	0xc0, 0x7e, 0x03, 0xdb, 0x03, 0x62, 0x31, 0xe7, 0xc1, 0x50, 0x0e, 0xdb, 0xac, 0xca, 0x53, 0x40,
	0x8b, 0xd6, 0x62, 0x54, 0xb5, 0x41, 0x39, 0x37, 0x3d, 0x7a, 0x35, 0x19, 0x38, 0x6c, 0x2c, 0xd4,
	0x6e, 0xb1, 0x69, 0xb1, 0x53, 0xef, 0x12, 0x7b, 0x1e, 0xf1, 0xee, 0x7f, 0xc2, 0x2a, 0x5f, 0xc2,
	0xfb, 0x5b, 0x1d, 0x89, 0xf1, 0x57, 0x81, 0xf8, 0x04, 0x7b, 0x5e, 0x41, 0x3a, 0x8d, 0x95, 0xb2,
	0xd5, 0xe3, 0xb0, 0x6e, 0x61, 0xcf, 0xd3, 0xb8, 0xa1, 0x52, 0x03, 0xa4, 0x11, 0x8f, 0xb8, 0xb7,
	0xdc, 0x53, 0x90, 0xd0, 0x8f, 0x61, 0xdf, 0xe5, 0x52, 0x7f, 0x27, 0x52, 0xe7, 0x5b, 0x62, 0x8b,
	0xac, 0xe4, 0x05, 0x45, 0x9f, 0xc9, 0x95, 0x16, 0x1c, 0x2c, 0xb9, 0x58, 0x48, 0xc5, 0xc2, 0xb6,
	0x18, 0xc2, 0xc7, 0x5b, 0x16, 0x4e, 0xe3, 0x86, 0xca, 0xdf, 0x25, 0x90, 0x59, 0x8d, 0x4c, 0xf4,
	0x80, 0xd6, 0xa0, 0x5f, 0x40, 0x06, 0x3b, 0x9e, 0x8e, 0x87, 0x94, 0xb8, 0x62, 0x57, 0x6e, 0x9b,
	0x5f, 0x69, 0xec, 0x78, 0x35, 0x66, 0x8b, 0x3e, 0x05, 0x60, 0xc0, 0x6b, 0x32, 0x74, 0xdc, 0x80,
	0xd2, 0xdb, 0x90, 0x2c, 0x4c, 0x9d, 0x1b, 0x2b, 0x4d, 0xd8, 0x5f, 0x48, 0x75, 0xad, 0xe2, 0xd8,
	0xfd, 0x2a, 0xfe, 0x67, 0x1c, 0xe2, 0xac, 0x67, 0x0f, 0xea, 0x37, 0xfa, 0x04, 0x58, 0x09, 0x3a,
	0x1b, 0xc3, 0xf7, 0x28, 0x37, 0x85, 0x1d, 0x8f, 0x3d, 0x31, 0x98, 0x15, 0xc0, 0x76, 0xd7, 0x9a,
	0xb2, 0x04, 0xec, 0xe7, 0x70, 0xb4, 0x32, 0x97, 0x2c, 0x4c, 0x4d, 0x3a, 0x35, 0x08, 0x1f, 0x4d,
	0x92, 0x76, 0xb8, 0x34, 0x62, 0xce, 0x85, 0x12, 0x3d, 0x87, 0xc2, 0x2a, 0xce, 0xb1, 0x47, 0x3e,
	0x30, 0xc1, 0x81, 0x6f, 0x2d, 0x03, 0x03, 0x2d, 0xfa, 0x35, 0x1c, 0xaf, 0x4d, 0xfd, 0xa9, 0xcd,
	0x6e, 0x2a, 0x03, 0xc7, 0x20, 0xe2, 0x6e, 0x58, 0x58, 0x19, 0xda, 0xdc, 0xa0, 0xe1, 0x18, 0x84,
	0x9d, 0xb2, 0x63, 0xfc, 0x5a, 0x27, 0x16, 0x11, 0xdd, 0x34, 0xc8, 0xc8, 0x25, 0xc4, 0x2b, 0xa4,
	0x78, 0xd4, 0x83, 0x31, 0x7e, 0xad, 0x06, 0xba, 0xa6, 0xaf, 0x42, 0x1d, 0x40, 0xcb, 0x18, 0xde,
	0xa5, 0xf4, 0xce, 0x2e, 0xc9, 0x8b, 0xce, 0x78, 0xbb, 0x3e, 0x87, 0x93, 0xd9, 0x19, 0x3f, 0x20,
	0x36, 0x25, 0xee, 0xf2, 0x51, 0x9f, 0xe1, 0x47, 0xfd, 0xdb, 0x81, 0x4d, 0x83, 0x9b, 0x2c, 0x1e,
	0xf8, 0xbf, 0x84, 0xe2, 0x74, 0x12, 0x0a, 0x07, 0x0e, 0x3f, 0xf2, 0x2d, 0xd6, 0xc0, 0xca, 0xdf,
	0x24, 0xd8, 0x9f, 0xdd, 0x5e, 0x2e, 0x08, 0xc5, 0xfc, 0xde, 0x21, 0x43, 0x6c, 0xea, 0x5a, 0x62,
	0x3f, 0xb1, 0x9f, 0xe8, 0x05, 0x64, 0x98, 0x46, 0xa7, 0x77, 0x13, 0x7f, 0x0f, 0xe5, 0xab, 0x67,
	0xbb, 0x6e, 0x49, 0x81, 0xbb, 0x72, 0x13, 0x53, 0xdc, 0xbf, 0x9b, 0x10, 0x2d, 0x6d, 0x88, 0x5f,
	0xca, 0x19, 0xa4, 0x03, 0x29, 0x4a, 0x41, 0x4c, 0xab, 0x7d, 0x25, 0x47, 0xd0, 0x13, 0xc8, 0x36,
	0xd5, 0x8b, 0x97, 0xcd, 0xab, 0xf3, 0x5a, 0x5f, 0x6d, 0xca, 0x12, 0xca, 0x42, 0xaa, 0xa9, 0x36,
	0x5e, 0x36, 0xd5, 0xa6, 0x1c, 0x55, 0xfe, 0x91, 0x82, 0x38, 0xa3, 0x02, 0xca, 0x43, 0x74, 0xc6,
	0xeb, 0xa8, 0x69, 0xac, 0x31, 0x3e, 0xba, 0xce, 0xf8, 0xcf, 0x20, 0xc9, 0xb2, 0x9c, 0x7a, 0x7c,
	0x23, 0xe7, 0x43, 0xef, 0x93, 0xcc, 0x7f, 0xb9, 0xc7, 0x2d, 0x35, 0x81, 0x60, 0xa4, 0xf7, 0x28,
	0x76, 0xa9, 0xbf, 0xc4, 0xf9, 0xdd, 0xa4, 0xe7, 0xd6, 0x01, 0x83, 0xd8, 0x3b, 0x08, 0x07, 0x3e,
	0xd9, 0xcd, 0x20, 0x62, 0x1b, 0x01, 0x6c, 0xc6, 0xd7, 0xf8, 0xe3, 0xf8, 0x9a, 0xf8, 0xbf, 0xf0,
	0x35, 0xf9, 0x58, 0xbe, 0xa6, 0xde, 0x84, 0xaf, 0xe9, 0xc7, 0xf2, 0x35, 0xf3, 0x50, 0xbe, 0xc2,
	0xf7, 0xc0, 0xd7, 0xec, 0x9b, 0xf1, 0x35, 0xb7, 0x95, 0xaf, 0xe8, 0x0a, 0xf6, 0x29, 0xb1, 0xfc,
	0xd7, 0xb0, 0xb1, 0xe0, 0x57, 0x61, 0x8f, 0x1f, 0x1f, 0xa5, 0xfb, 0xf2, 0x51, 0x93, 0x03, 0x17,
	0x81, 0x44, 0xf9, 0x06, 0x92, 0xfe, 0xae, 0x47, 0x39, 0x48, 0x6b, 0x6a, 0x4f, 0xd5, 0xbe, 0x54,
	0x9b, 0x72, 0x04, 0xed, 0x41, 0x46, 0x7d, 0xa5, 0x36, 0xae, 0xfa, 0xdd, 0x17, 0x6d, 0x59, 0x62,
	0x8f, 0xbd, 0xab, 0x46, 0x43, 0x55, 0x39, 0x23, 0x11, 0x40, 0xb2, 0x55, 0xeb, 0x9e, 0xab, 0x4d,
	0x39, 0xc6, 0x70, 0x8d, 0xda, 0x8b, 0x86, 0xca, 0x9e, 0xe2, 0x28, 0x0f, 0x70, 0xa9, 0xbd, 0x6c,
	0xa8, 0xbd, 0x1e, 0x03, 0x26, 0x94, 0x21, 0xec, 0xd5, 0x0c, 0xa3, 0x6f, 0x91, 0x07, 0x9c, 0xd2,
	0x55, 0x88, 0x51, 0x2b, 0x38, 0xb0, 0xc2, 0x5e, 0xc9, 0xfc, 0x2f, 0x12, 0xcc, 0x31, 0x33, 0x56,
	0x64, 0xc8, 0x07, 0x71, 0xc4, 0x7d, 0xaa, 0x0a, 0x7b, 0x6d, 0x42, 0x1f, 0x14, 0x59, 0x69, 0x42,
	0x3e, 0xc0, 0x88, 0x83, 0x5a, 0xe4, 0x22, 0x3d, 0x20, 0x97, 0x67, 0x16, 0xa4, 0xc4, 0x4b, 0x1e,
	0xeb, 0x5b, 0xbd, 0xdb, 0xef, 0xf5, 0x35, 0xb5, 0x76, 0x21, 0x47, 0x50, 0x1a, 0xe2, 0xb5, 0x57,
	0xd5, 0x4f, 0x64, 0x09, 0x25, 0x21, 0xda, 0xfd, 0x42, 0x8e, 0x32, 0x83, 0xee, 0x45, 0xad, 0xad,
	0xea, 0x97, 0x2f, 0xda, 0x72, 0x8c, 0xb5, 0xcf, 0x7f, 0xfc, 0xed, 0xa5, 0xda, 0x96, 0xe3, 0x08,
	0x41, 0xbe, 0xa5, 0xa9, 0xaa, 0xde, 0x57, 0x5f, 0xf5, 0xf5, 0xab, 0x7e, 0xeb, 0xb9, 0x9c, 0x60,
	0x90, 0xaf, 0x6a, 0x7d, 0x55, 0x6b, 0xd5, 0xce, 0xcf, 0xe5, 0x64, 0xf5, 0xbf, 0x09, 0x38, 0xec,
	0xf9, 0x69, 0x05, 0x6f, 0x09, 0xc4, 0xbd, 0x35, 0x07, 0x04, 0x7d, 0x03, 0x99, 0xd9, 0xcd, 0x03,
	0x7d, 0x10, 0x92, 0xfb, 0xea, 0x35, 0xaa, 0x58, 0xda, 0x6d, 0x28, 0x7a, 0x83, 0x01, 0xe6, 0xf7,
	0x58, 0x14, 0x86, 0x5b, 0xbb, 0x18, 0x17, 0x3f, 0xbc, 0x87, 0xa5, 0x08, 0xf1, 0x17, 0x09, 0x8e,
	0xb7, 0x5c, 0x66, 0xd1, 0xa7, 0x5b, 0x92, 0xdd, 0x7e, 0x93, 0x2e, 0x7e, 0xf6, 0x18, 0xa8, 0x48,
	0xeb, 0x35, 0x1c, 0xbc, 0x9c, 0x10, 0x7b, 0xe5, 0xc3, 0x0a, 0xfa, 0x28, 0xec, 0x0d, 0x67, 0xe3,
	0xd7, 0xb2, 0x62, 0xf9, 0xbe, 0xe6, 0x7e, 0xd4, 0x92, 0xf4, 0x53, 0x09, 0x19, 0x90, 0x5d, 0xb8,
	0x41, 0xa3, 0x0f, 0x43, 0xbf, 0xc0, 0xac, 0x5e, 0xd4, 0x8b, 0xcf, 0xee, 0x63, 0x2a, 0xea, 0xbb,
	0x82, 0xa4, 0xcf, 0x26, 0xf4, 0xc3, 0x10, 0xd4, 0x12, 0xa9, 0x8b, 0x3f, 0xda, 0x61, 0x35, 0x77,
	0xeb, 0xd3, 0x2b, 0xd4, 0xed, 0x12, 0x63, 0x43, 0xdd, 0x2e, 0x73, 0xb4, 0x3e, 0x84, 0xb7, 0x07,
	0xce, 0x78, 0xb3, 0x6d, 0xfd, 0xa0, 0xb7, 0x24, 0xbe, 0x64, 0x93, 0xfe, 0x52, 0xfa, 0xba, 0x3a,
	0x32, 0xe9, 0xcd, 0xf4, 0xba, 0x3c, 0x70, 0xc6, 0x15, 0xd3, 0x1e, 0x3a, 0x02, 0x6c, 0xda, 0x83,
	0xca, 0xc8, 0xf9, 0x68, 0xe3, 0xa7, 0xd0, 0xeb, 0x24, 0x3f, 0x26, 0x3e, 0xfe, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x45, 0x39, 0x67, 0xef, 0xc1, 0x15, 0x00, 0x00,
}
