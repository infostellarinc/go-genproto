// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stellarstation/api/v1/monitoring/monitoring.proto

package monitoring // import "github.com/infostellarinc/go-stellarstation/api/v1/monitoring"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import antenna "github.com/infostellarinc/go-stellarstation/api/v1/antenna"
import common "github.com/infostellarinc/go-stellarstation/api/v1/common"
import orbit "github.com/infostellarinc/go-stellarstation/api/v1/orbit"
import radio "github.com/infostellarinc/go-stellarstation/api/v1/radio"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A current status of convolutional coding.
type ConvolutionalCodingStatus int32

const (
	// Not locked on.
	ConvolutionalCodingStatus_UNLOCKED ConvolutionalCodingStatus = 0
	// Locked onto the in-phase signal.
	ConvolutionalCodingStatus_I_LOCKED ConvolutionalCodingStatus = 1
	// Locked onto the quadrature signal.
	ConvolutionalCodingStatus_Q_LOCKED ConvolutionalCodingStatus = 2
	// Locked onto both in-phase and quadrature signal.
	ConvolutionalCodingStatus_LOCKED ConvolutionalCodingStatus = 3
)

var ConvolutionalCodingStatus_name = map[int32]string{
	0: "UNLOCKED",
	1: "I_LOCKED",
	2: "Q_LOCKED",
	3: "LOCKED",
}
var ConvolutionalCodingStatus_value = map[string]int32{
	"UNLOCKED": 0,
	"I_LOCKED": 1,
	"Q_LOCKED": 2,
	"LOCKED":   3,
}

func (x ConvolutionalCodingStatus) String() string {
	return proto.EnumName(ConvolutionalCodingStatus_name, int32(x))
}
func (ConvolutionalCodingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_monitoring_3398f8c319b4b4ec, []int{0}
}

type ReedSolomonStatus_Status int32

const (
	// Indicates Reed-Solomon coding is functioning.
	ReedSolomonStatus_OK ReedSolomonStatus_Status = 0
	// Indicates Reed-Solomon coding encountered an interleave error.
	ReedSolomonStatus_INTERLEAVE_ERROR ReedSolomonStatus_Status = 1
	// Indicates Reed-Solomon coding exceeded its correction capacity.
	ReedSolomonStatus_CORRECTION_CAPACITY_EXCEEDED ReedSolomonStatus_Status = 2
)

var ReedSolomonStatus_Status_name = map[int32]string{
	0: "OK",
	1: "INTERLEAVE_ERROR",
	2: "CORRECTION_CAPACITY_EXCEEDED",
}
var ReedSolomonStatus_Status_value = map[string]int32{
	"OK":                           0,
	"INTERLEAVE_ERROR":             1,
	"CORRECTION_CAPACITY_EXCEEDED": 2,
}

func (x ReedSolomonStatus_Status) String() string {
	return proto.EnumName(ReedSolomonStatus_Status_name, int32(x))
}
func (ReedSolomonStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_monitoring_3398f8c319b4b4ec, []int{5, 0}
}

// The current configuration of a transmitter.
//
// A transmitter takes a bitstream and applies signal processing to create the final waveform sent
// to a satellite.
type TransmitterConfiguration struct {
	// The modulation type of the transmitter.
	Modulation radio.Modulation `protobuf:"varint,1,opt,name=modulation,proto3,enum=stellarstation.api.v1.radio.Modulation" json:"modulation,omitempty"`
	// Whether the carrier is enabled.
	IsCarrierEnabled bool `protobuf:"varint,2,opt,name=is_carrier_enabled,json=isCarrierEnabled,proto3" json:"is_carrier_enabled,omitempty"`
	// The bitrate of the transmitter.
	Bitrate uint64 `protobuf:"varint,3,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	// The line coding of the transmitter.
	LineCoding radio.LineCoding `protobuf:"varint,4,opt,name=line_coding,json=lineCoding,proto3,enum=stellarstation.api.v1.radio.LineCoding" json:"line_coding,omitempty"`
	// The bandwidth of the filter.
	FilterBandwidthHz uint64 `protobuf:"varint,5,opt,name=filter_bandwidth_hz,json=filterBandwidthHz,proto3" json:"filter_bandwidth_hz,omitempty"`
	// The sampling frequency.
	SamplingFrequencyHz  uint64   `protobuf:"varint,6,opt,name=sampling_frequency_hz,json=samplingFrequencyHz,proto3" json:"sampling_frequency_hz,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransmitterConfiguration) Reset()         { *m = TransmitterConfiguration{} }
func (m *TransmitterConfiguration) String() string { return proto.CompactTextString(m) }
func (*TransmitterConfiguration) ProtoMessage()    {}
func (*TransmitterConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_monitoring_3398f8c319b4b4ec, []int{0}
}
func (m *TransmitterConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransmitterConfiguration.Unmarshal(m, b)
}
func (m *TransmitterConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransmitterConfiguration.Marshal(b, m, deterministic)
}
func (dst *TransmitterConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransmitterConfiguration.Merge(dst, src)
}
func (m *TransmitterConfiguration) XXX_Size() int {
	return xxx_messageInfo_TransmitterConfiguration.Size(m)
}
func (m *TransmitterConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_TransmitterConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_TransmitterConfiguration proto.InternalMessageInfo

func (m *TransmitterConfiguration) GetModulation() radio.Modulation {
	if m != nil {
		return m.Modulation
	}
	return radio.Modulation_DISABLED
}

func (m *TransmitterConfiguration) GetIsCarrierEnabled() bool {
	if m != nil {
		return m.IsCarrierEnabled
	}
	return false
}

func (m *TransmitterConfiguration) GetBitrate() uint64 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (m *TransmitterConfiguration) GetLineCoding() radio.LineCoding {
	if m != nil {
		return m.LineCoding
	}
	return radio.LineCoding_NRZ_L
}

func (m *TransmitterConfiguration) GetFilterBandwidthHz() uint64 {
	if m != nil {
		return m.FilterBandwidthHz
	}
	return 0
}

func (m *TransmitterConfiguration) GetSamplingFrequencyHz() uint64 {
	if m != nil {
		return m.SamplingFrequencyHz
	}
	return 0
}

// The current configuration of a receiver.
//
// A receiver takes a waveform from a satellite and applies signal processing to produce a
// bitstream.
type ReceiverConfiguration struct {
	// The modulation type of the receiver.
	Modulation radio.Modulation `protobuf:"varint,1,opt,name=modulation,proto3,enum=stellarstation.api.v1.radio.Modulation" json:"modulation,omitempty"`
	// The bandwidth, in Hz.
	BandwidthHz uint64 `protobuf:"varint,2,opt,name=bandwidth_hz,json=bandwidthHz,proto3" json:"bandwidth_hz,omitempty"`
	// The sampling frequency.
	SamplingFrequencyHz uint64 `protobuf:"varint,3,opt,name=sampling_frequency_hz,json=samplingFrequencyHz,proto3" json:"sampling_frequency_hz,omitempty"`
	// The bitrate of the receiver.
	Bitrate uint64 `protobuf:"varint,4,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	// The line coding of the receiver.
	LineCoding radio.LineCoding `protobuf:"varint,5,opt,name=line_coding,json=lineCoding,proto3,enum=stellarstation.api.v1.radio.LineCoding" json:"line_coding,omitempty"`
	// The frame synchronization word being used. Unset if frame synchronization is disabled.
	SynchronizationWord *common.Bits `protobuf:"bytes,6,opt,name=synchronization_word,json=synchronizationWord,proto3" json:"synchronization_word,omitempty"`
	// Whether convolutional code descrambling is enabled.
	IsConvolutionalCodeDescrambling bool `protobuf:"varint,7,opt,name=is_convolutional_code_descrambling,json=isConvolutionalCodeDescrambling,proto3" json:"is_convolutional_code_descrambling,omitempty"`
	// Whether convolutional code decoding is enabled.
	IsConvolutionalCodeDecoding bool `protobuf:"varint,8,opt,name=is_convolutional_code_decoding,json=isConvolutionalCodeDecoding,proto3" json:"is_convolutional_code_decoding,omitempty"`
	// Whether convolutional codes are inverted.
	// No meaning if `is_convolutional_code_decoding` is not enabled.
	IsConvolutionalCodeInverted bool `protobuf:"varint,9,opt,name=is_convolutional_code_inverted,json=isConvolutionalCodeInverted,proto3" json:"is_convolutional_code_inverted,omitempty"`
	// Whether reed solomon coding is being used.
	IsReedSolomonEnabled bool `protobuf:"varint,10,opt,name=is_reed_solomon_enabled,json=isReedSolomonEnabled,proto3" json:"is_reed_solomon_enabled,omitempty"`
	// The size of a frame, in bits.
	FrameSize uint32 `protobuf:"varint,11,opt,name=frame_size,json=frameSize,proto3" json:"frame_size,omitempty"`
	// Whether frame checking is enabled.
	IsFrameCheckingEnabled bool     `protobuf:"varint,12,opt,name=is_frame_checking_enabled,json=isFrameCheckingEnabled,proto3" json:"is_frame_checking_enabled,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ReceiverConfiguration) Reset()         { *m = ReceiverConfiguration{} }
func (m *ReceiverConfiguration) String() string { return proto.CompactTextString(m) }
func (*ReceiverConfiguration) ProtoMessage()    {}
func (*ReceiverConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_monitoring_3398f8c319b4b4ec, []int{1}
}
func (m *ReceiverConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiverConfiguration.Unmarshal(m, b)
}
func (m *ReceiverConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiverConfiguration.Marshal(b, m, deterministic)
}
func (dst *ReceiverConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiverConfiguration.Merge(dst, src)
}
func (m *ReceiverConfiguration) XXX_Size() int {
	return xxx_messageInfo_ReceiverConfiguration.Size(m)
}
func (m *ReceiverConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiverConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiverConfiguration proto.InternalMessageInfo

func (m *ReceiverConfiguration) GetModulation() radio.Modulation {
	if m != nil {
		return m.Modulation
	}
	return radio.Modulation_DISABLED
}

func (m *ReceiverConfiguration) GetBandwidthHz() uint64 {
	if m != nil {
		return m.BandwidthHz
	}
	return 0
}

func (m *ReceiverConfiguration) GetSamplingFrequencyHz() uint64 {
	if m != nil {
		return m.SamplingFrequencyHz
	}
	return 0
}

func (m *ReceiverConfiguration) GetBitrate() uint64 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (m *ReceiverConfiguration) GetLineCoding() radio.LineCoding {
	if m != nil {
		return m.LineCoding
	}
	return radio.LineCoding_NRZ_L
}

func (m *ReceiverConfiguration) GetSynchronizationWord() *common.Bits {
	if m != nil {
		return m.SynchronizationWord
	}
	return nil
}

func (m *ReceiverConfiguration) GetIsConvolutionalCodeDescrambling() bool {
	if m != nil {
		return m.IsConvolutionalCodeDescrambling
	}
	return false
}

func (m *ReceiverConfiguration) GetIsConvolutionalCodeDecoding() bool {
	if m != nil {
		return m.IsConvolutionalCodeDecoding
	}
	return false
}

func (m *ReceiverConfiguration) GetIsConvolutionalCodeInverted() bool {
	if m != nil {
		return m.IsConvolutionalCodeInverted
	}
	return false
}

func (m *ReceiverConfiguration) GetIsReedSolomonEnabled() bool {
	if m != nil {
		return m.IsReedSolomonEnabled
	}
	return false
}

func (m *ReceiverConfiguration) GetFrameSize() uint32 {
	if m != nil {
		return m.FrameSize
	}
	return 0
}

func (m *ReceiverConfiguration) GetIsFrameCheckingEnabled() bool {
	if m != nil {
		return m.IsFrameCheckingEnabled
	}
	return false
}

// The configuration of the currently executing plan.
type PlanConfiguration struct {
	// The TLE for the satellite in this plan.
	Tle                  *orbit.Tle `protobuf:"bytes,1,opt,name=tle,proto3" json:"tle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PlanConfiguration) Reset()         { *m = PlanConfiguration{} }
func (m *PlanConfiguration) String() string { return proto.CompactTextString(m) }
func (*PlanConfiguration) ProtoMessage()    {}
func (*PlanConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_monitoring_3398f8c319b4b4ec, []int{2}
}
func (m *PlanConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlanConfiguration.Unmarshal(m, b)
}
func (m *PlanConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlanConfiguration.Marshal(b, m, deterministic)
}
func (dst *PlanConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlanConfiguration.Merge(dst, src)
}
func (m *PlanConfiguration) XXX_Size() int {
	return xxx_messageInfo_PlanConfiguration.Size(m)
}
func (m *PlanConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_PlanConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_PlanConfiguration proto.InternalMessageInfo

func (m *PlanConfiguration) GetTle() *orbit.Tle {
	if m != nil {
		return m.Tle
	}
	return nil
}

// The current configuration of a ground station. This is controlled by the parameters of a pass,
// based on the configuration of the satellite it will communicate with. When debugging issues with
// a pass, it is good to first confirm that the actual reported configuration matches the expected
// settings.
type GroundStationConfiguration struct {
	// The current configuration of the transmitter in use by the ground station. This configuration
	// should match the parameters of the executing plan. When debugging issues with data
	// transmission (e.g., no response from satellite), it can be useful to confirm these values match
	// the expected configuration of the transmitter.
	Transmitter *TransmitterConfiguration `protobuf:"bytes,1,opt,name=transmitter,proto3" json:"transmitter,omitempty"`
	// The current configuration of the receiver in use by the ground station. This configuration
	// should match the parameters of the executing plan. When debugging issues with data
	// reception (e.g., can't decode signal), it can be useful to confirm these values match
	// the expected configuration of the receiver.
	Receiver *ReceiverConfiguration `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// The current configuration of the antenna used by the ground station. These are the physical
	// parameters of an antenna and in practice should never change, even across passes. But natural
	// events such as earthquakes can cause small changes in these values. When debugging issues with
	// tracking a satellite (e.g., getting no signal at all), it can be useful to confirm these values
	// match the expected configuration of the antenna.
	Antenna *antenna.AntennaConfiguration `protobuf:"bytes,3,opt,name=antenna,proto3" json:"antenna,omitempty"`
	// The current configuration of the plan being executed by the ground station.
	Plan                 *PlanConfiguration `protobuf:"bytes,4,opt,name=plan,proto3" json:"plan,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GroundStationConfiguration) Reset()         { *m = GroundStationConfiguration{} }
func (m *GroundStationConfiguration) String() string { return proto.CompactTextString(m) }
func (*GroundStationConfiguration) ProtoMessage()    {}
func (*GroundStationConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_monitoring_3398f8c319b4b4ec, []int{3}
}
func (m *GroundStationConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroundStationConfiguration.Unmarshal(m, b)
}
func (m *GroundStationConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroundStationConfiguration.Marshal(b, m, deterministic)
}
func (dst *GroundStationConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroundStationConfiguration.Merge(dst, src)
}
func (m *GroundStationConfiguration) XXX_Size() int {
	return xxx_messageInfo_GroundStationConfiguration.Size(m)
}
func (m *GroundStationConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_GroundStationConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_GroundStationConfiguration proto.InternalMessageInfo

func (m *GroundStationConfiguration) GetTransmitter() *TransmitterConfiguration {
	if m != nil {
		return m.Transmitter
	}
	return nil
}

func (m *GroundStationConfiguration) GetReceiver() *ReceiverConfiguration {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *GroundStationConfiguration) GetAntenna() *antenna.AntennaConfiguration {
	if m != nil {
		return m.Antenna
	}
	return nil
}

func (m *GroundStationConfiguration) GetPlan() *PlanConfiguration {
	if m != nil {
		return m.Plan
	}
	return nil
}

// The current state of the ground station's transmitter during the operation of a pass.
type TransmitterState struct {
	// The current center frequency of the transmitter, taking into account e.g., Doppler correction.
	CenterFrequencyHz uint64 `protobuf:"varint,1,opt,name=center_frequency_hz,json=centerFrequencyHz,proto3" json:"center_frequency_hz,omitempty"`
	// The current level of the carrier signal, in dBm (decibal-milliwatts).
	CarrierLevelDbm      float64  `protobuf:"fixed64,2,opt,name=carrier_level_dbm,json=carrierLevelDbm,proto3" json:"carrier_level_dbm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransmitterState) Reset()         { *m = TransmitterState{} }
func (m *TransmitterState) String() string { return proto.CompactTextString(m) }
func (*TransmitterState) ProtoMessage()    {}
func (*TransmitterState) Descriptor() ([]byte, []int) {
	return fileDescriptor_monitoring_3398f8c319b4b4ec, []int{4}
}
func (m *TransmitterState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransmitterState.Unmarshal(m, b)
}
func (m *TransmitterState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransmitterState.Marshal(b, m, deterministic)
}
func (dst *TransmitterState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransmitterState.Merge(dst, src)
}
func (m *TransmitterState) XXX_Size() int {
	return xxx_messageInfo_TransmitterState.Size(m)
}
func (m *TransmitterState) XXX_DiscardUnknown() {
	xxx_messageInfo_TransmitterState.DiscardUnknown(m)
}

var xxx_messageInfo_TransmitterState proto.InternalMessageInfo

func (m *TransmitterState) GetCenterFrequencyHz() uint64 {
	if m != nil {
		return m.CenterFrequencyHz
	}
	return 0
}

func (m *TransmitterState) GetCarrierLevelDbm() float64 {
	if m != nil {
		return m.CarrierLevelDbm
	}
	return 0
}

// The status of Reed-Solomon coding.
type ReedSolomonStatus struct {
	// Current status of Reed-Solomon coding.
	Status ReedSolomonStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=stellarstation.api.v1.monitoring.ReedSolomonStatus_Status" json:"status,omitempty"`
	// The number of Reed-Solomon corrected signals. Only set is `status` == `OK`.
	NumCorrectedSignals  uint32   `protobuf:"varint,2,opt,name=num_corrected_signals,json=numCorrectedSignals,proto3" json:"num_corrected_signals,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReedSolomonStatus) Reset()         { *m = ReedSolomonStatus{} }
func (m *ReedSolomonStatus) String() string { return proto.CompactTextString(m) }
func (*ReedSolomonStatus) ProtoMessage()    {}
func (*ReedSolomonStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_monitoring_3398f8c319b4b4ec, []int{5}
}
func (m *ReedSolomonStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReedSolomonStatus.Unmarshal(m, b)
}
func (m *ReedSolomonStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReedSolomonStatus.Marshal(b, m, deterministic)
}
func (dst *ReedSolomonStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReedSolomonStatus.Merge(dst, src)
}
func (m *ReedSolomonStatus) XXX_Size() int {
	return xxx_messageInfo_ReedSolomonStatus.Size(m)
}
func (m *ReedSolomonStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ReedSolomonStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ReedSolomonStatus proto.InternalMessageInfo

func (m *ReedSolomonStatus) GetStatus() ReedSolomonStatus_Status {
	if m != nil {
		return m.Status
	}
	return ReedSolomonStatus_OK
}

func (m *ReedSolomonStatus) GetNumCorrectedSignals() uint32 {
	if m != nil {
		return m.NumCorrectedSignals
	}
	return 0
}

// The current state of the ground station's receiver during the operation of a pass.
type ReceiverState struct {
	// The current center frequency of the receiver, taking into account e.g., Doppler correction.
	CenterFrequencyHz uint64 `protobuf:"varint,1,opt,name=center_frequency_hz,json=centerFrequencyHz,proto3" json:"center_frequency_hz,omitempty"`
	// The current level of the carrier signal, in dBm (decibal-milliwatts).
	CarrierLevelDbm float64 `protobuf:"fixed64,2,opt,name=carrier_level_dbm,json=carrierLevelDbm,proto3" json:"carrier_level_dbm,omitempty"`
	// Whether the receiver is phase-locked onto a signal.
	IsPhaseLocked bool `protobuf:"varint,3,opt,name=is_phase_locked,json=isPhaseLocked,proto3" json:"is_phase_locked,omitempty"`
	// Whether the bit synchronizer is locked onto a signal.
	IsBitSynchronizerLocked bool `protobuf:"varint,4,opt,name=is_bit_synchronizer_locked,json=isBitSynchronizerLocked,proto3" json:"is_bit_synchronizer_locked,omitempty"`
	// The signal-to-noise ratio per bit, e.g., Eb/N0.
	// https://en.wikipedia.org/wiki/Eb/N0
	NormalizedSnr float64 `protobuf:"fixed64,5,opt,name=normalized_snr,json=normalizedSnr,proto3" json:"normalized_snr,omitempty"`
	// Whether the frame synchronizer is locked onto a signal.
	IsFrameSynchronizerLocked bool `protobuf:"varint,6,opt,name=is_frame_synchronizer_locked,json=isFrameSynchronizerLocked,proto3" json:"is_frame_synchronizer_locked,omitempty"`
	// The current status of convolutional coding.
	ConvolutionalCodingStatus ConvolutionalCodingStatus `protobuf:"varint,7,opt,name=convolutional_coding_status,json=convolutionalCodingStatus,proto3,enum=stellarstation.api.v1.monitoring.ConvolutionalCodingStatus" json:"convolutional_coding_status,omitempty"`
	// The bit error rate of convolutional coding.
	ConvolutionalCodingBitErrorRate float64 `protobuf:"fixed64,8,opt,name=convolutional_coding_bit_error_rate,json=convolutionalCodingBitErrorRate,proto3" json:"convolutional_coding_bit_error_rate,omitempty"`
	// The status of Reed-Solomon coding.
	ReedSolomonStatus    *ReedSolomonStatus `protobuf:"bytes,9,opt,name=reed_solomon_status,json=reedSolomonStatus,proto3" json:"reed_solomon_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ReceiverState) Reset()         { *m = ReceiverState{} }
func (m *ReceiverState) String() string { return proto.CompactTextString(m) }
func (*ReceiverState) ProtoMessage()    {}
func (*ReceiverState) Descriptor() ([]byte, []int) {
	return fileDescriptor_monitoring_3398f8c319b4b4ec, []int{6}
}
func (m *ReceiverState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReceiverState.Unmarshal(m, b)
}
func (m *ReceiverState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReceiverState.Marshal(b, m, deterministic)
}
func (dst *ReceiverState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiverState.Merge(dst, src)
}
func (m *ReceiverState) XXX_Size() int {
	return xxx_messageInfo_ReceiverState.Size(m)
}
func (m *ReceiverState) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiverState.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiverState proto.InternalMessageInfo

func (m *ReceiverState) GetCenterFrequencyHz() uint64 {
	if m != nil {
		return m.CenterFrequencyHz
	}
	return 0
}

func (m *ReceiverState) GetCarrierLevelDbm() float64 {
	if m != nil {
		return m.CarrierLevelDbm
	}
	return 0
}

func (m *ReceiverState) GetIsPhaseLocked() bool {
	if m != nil {
		return m.IsPhaseLocked
	}
	return false
}

func (m *ReceiverState) GetIsBitSynchronizerLocked() bool {
	if m != nil {
		return m.IsBitSynchronizerLocked
	}
	return false
}

func (m *ReceiverState) GetNormalizedSnr() float64 {
	if m != nil {
		return m.NormalizedSnr
	}
	return 0
}

func (m *ReceiverState) GetIsFrameSynchronizerLocked() bool {
	if m != nil {
		return m.IsFrameSynchronizerLocked
	}
	return false
}

func (m *ReceiverState) GetConvolutionalCodingStatus() ConvolutionalCodingStatus {
	if m != nil {
		return m.ConvolutionalCodingStatus
	}
	return ConvolutionalCodingStatus_UNLOCKED
}

func (m *ReceiverState) GetConvolutionalCodingBitErrorRate() float64 {
	if m != nil {
		return m.ConvolutionalCodingBitErrorRate
	}
	return 0
}

func (m *ReceiverState) GetReedSolomonStatus() *ReedSolomonStatus {
	if m != nil {
		return m.ReedSolomonStatus
	}
	return nil
}

// The current state of the ground station's antenna during the operation of a pass.
type AntennaState struct {
	// The current state of the antenna's azimuth (horizontal angle).
	Azimuth *AntennaState_Angle `protobuf:"bytes,1,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	// The current state of the antenna's elevation (vertical angle).
	Elevation *AntennaState_Angle `protobuf:"bytes,2,opt,name=elevation,proto3" json:"elevation,omitempty"`
	// The current polarization of the antenna.
	Polarization         antenna.AntennaPolarization `protobuf:"varint,3,opt,name=polarization,proto3,enum=stellarstation.api.v1.antenna.AntennaPolarization" json:"polarization,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AntennaState) Reset()         { *m = AntennaState{} }
func (m *AntennaState) String() string { return proto.CompactTextString(m) }
func (*AntennaState) ProtoMessage()    {}
func (*AntennaState) Descriptor() ([]byte, []int) {
	return fileDescriptor_monitoring_3398f8c319b4b4ec, []int{7}
}
func (m *AntennaState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AntennaState.Unmarshal(m, b)
}
func (m *AntennaState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AntennaState.Marshal(b, m, deterministic)
}
func (dst *AntennaState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AntennaState.Merge(dst, src)
}
func (m *AntennaState) XXX_Size() int {
	return xxx_messageInfo_AntennaState.Size(m)
}
func (m *AntennaState) XXX_DiscardUnknown() {
	xxx_messageInfo_AntennaState.DiscardUnknown(m)
}

var xxx_messageInfo_AntennaState proto.InternalMessageInfo

func (m *AntennaState) GetAzimuth() *AntennaState_Angle {
	if m != nil {
		return m.Azimuth
	}
	return nil
}

func (m *AntennaState) GetElevation() *AntennaState_Angle {
	if m != nil {
		return m.Elevation
	}
	return nil
}

func (m *AntennaState) GetPolarization() antenna.AntennaPolarization {
	if m != nil {
		return m.Polarization
	}
	return antenna.AntennaPolarization_HORIZONTAL
}

// The state of an antenna angle.
type AntennaState_Angle struct {
	// The angle that was specified for the antenna. When the antenna is functioning properly,
	// there should be nearly no difference between this and `measured`.
	Command float64 `protobuf:"fixed64,1,opt,name=command,proto3" json:"command,omitempty"`
	// The actual angle physically measured from the antenna. When the antenna is functioning
	// properly, there should be nearly no difference between this and `command`.
	Measured             float64  `protobuf:"fixed64,2,opt,name=measured,proto3" json:"measured,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AntennaState_Angle) Reset()         { *m = AntennaState_Angle{} }
func (m *AntennaState_Angle) String() string { return proto.CompactTextString(m) }
func (*AntennaState_Angle) ProtoMessage()    {}
func (*AntennaState_Angle) Descriptor() ([]byte, []int) {
	return fileDescriptor_monitoring_3398f8c319b4b4ec, []int{7, 0}
}
func (m *AntennaState_Angle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AntennaState_Angle.Unmarshal(m, b)
}
func (m *AntennaState_Angle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AntennaState_Angle.Marshal(b, m, deterministic)
}
func (dst *AntennaState_Angle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AntennaState_Angle.Merge(dst, src)
}
func (m *AntennaState_Angle) XXX_Size() int {
	return xxx_messageInfo_AntennaState_Angle.Size(m)
}
func (m *AntennaState_Angle) XXX_DiscardUnknown() {
	xxx_messageInfo_AntennaState_Angle.DiscardUnknown(m)
}

var xxx_messageInfo_AntennaState_Angle proto.InternalMessageInfo

func (m *AntennaState_Angle) GetCommand() float64 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *AntennaState_Angle) GetMeasured() float64 {
	if m != nil {
		return m.Measured
	}
	return 0
}

// The current state of a ground station during the operation of a pass.
//
// State that can be monitored will vary by the specifications of the ground station that executes
// the pass. Any information that cannot be monitored for the current ground station will not be
// filled.
type GroundStationState struct {
	// The current state of the transmitter in use during a pass. When debugging issues with data
	// transmission (e.g., no response from a satellite), it can be good to verify the metrics for
	// the transmitter are within expected or acceptable values.
	Transmitter *TransmitterState `protobuf:"bytes,1,opt,name=transmitter,proto3" json:"transmitter,omitempty"`
	// The current state of the receiver in use during a pass. When debugging issues with data
	// reception (e.g., can't decode signal), it can be good to verify the metrics for the receiver
	// are within expected or acceptable values.
	Receiver *ReceiverState `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// The current state of the antenna being used for the pass. When debugging issues with tracking
	// a satellite (e.g., getting no signal at all), it can be useful to ensure the physically
	// measured values are within expected or acceptable values.
	Antenna              *AntennaState `protobuf:"bytes,3,opt,name=antenna,proto3" json:"antenna,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GroundStationState) Reset()         { *m = GroundStationState{} }
func (m *GroundStationState) String() string { return proto.CompactTextString(m) }
func (*GroundStationState) ProtoMessage()    {}
func (*GroundStationState) Descriptor() ([]byte, []int) {
	return fileDescriptor_monitoring_3398f8c319b4b4ec, []int{8}
}
func (m *GroundStationState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroundStationState.Unmarshal(m, b)
}
func (m *GroundStationState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroundStationState.Marshal(b, m, deterministic)
}
func (dst *GroundStationState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroundStationState.Merge(dst, src)
}
func (m *GroundStationState) XXX_Size() int {
	return xxx_messageInfo_GroundStationState.Size(m)
}
func (m *GroundStationState) XXX_DiscardUnknown() {
	xxx_messageInfo_GroundStationState.DiscardUnknown(m)
}

var xxx_messageInfo_GroundStationState proto.InternalMessageInfo

func (m *GroundStationState) GetTransmitter() *TransmitterState {
	if m != nil {
		return m.Transmitter
	}
	return nil
}

func (m *GroundStationState) GetReceiver() *ReceiverState {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *GroundStationState) GetAntenna() *AntennaState {
	if m != nil {
		return m.Antenna
	}
	return nil
}

func init() {
	proto.RegisterType((*TransmitterConfiguration)(nil), "stellarstation.api.v1.monitoring.TransmitterConfiguration")
	proto.RegisterType((*ReceiverConfiguration)(nil), "stellarstation.api.v1.monitoring.ReceiverConfiguration")
	proto.RegisterType((*PlanConfiguration)(nil), "stellarstation.api.v1.monitoring.PlanConfiguration")
	proto.RegisterType((*GroundStationConfiguration)(nil), "stellarstation.api.v1.monitoring.GroundStationConfiguration")
	proto.RegisterType((*TransmitterState)(nil), "stellarstation.api.v1.monitoring.TransmitterState")
	proto.RegisterType((*ReedSolomonStatus)(nil), "stellarstation.api.v1.monitoring.ReedSolomonStatus")
	proto.RegisterType((*ReceiverState)(nil), "stellarstation.api.v1.monitoring.ReceiverState")
	proto.RegisterType((*AntennaState)(nil), "stellarstation.api.v1.monitoring.AntennaState")
	proto.RegisterType((*AntennaState_Angle)(nil), "stellarstation.api.v1.monitoring.AntennaState.Angle")
	proto.RegisterType((*GroundStationState)(nil), "stellarstation.api.v1.monitoring.GroundStationState")
	proto.RegisterEnum("stellarstation.api.v1.monitoring.ConvolutionalCodingStatus", ConvolutionalCodingStatus_name, ConvolutionalCodingStatus_value)
	proto.RegisterEnum("stellarstation.api.v1.monitoring.ReedSolomonStatus_Status", ReedSolomonStatus_Status_name, ReedSolomonStatus_Status_value)
}

func init() {
	proto.RegisterFile("stellarstation/api/v1/monitoring/monitoring.proto", fileDescriptor_monitoring_3398f8c319b4b4ec)
}

var fileDescriptor_monitoring_3398f8c319b4b4ec = []byte{
	// 1251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x6d, 0x53, 0x1b, 0xb7,
	0x13, 0xcf, 0x19, 0x30, 0x66, 0x0d, 0x89, 0x11, 0xc9, 0x3f, 0x86, 0xe4, 0xdf, 0xb8, 0xee, 0x43,
	0x68, 0xda, 0x9a, 0x89, 0xd3, 0x4e, 0xa7, 0xc9, 0x64, 0x3a, 0x70, 0x38, 0xc0, 0x40, 0x80, 0xc8,
	0x24, 0x7d, 0x98, 0xce, 0xdc, 0xc8, 0x77, 0xc2, 0xd6, 0xe4, 0x4e, 0x72, 0xa5, 0xb3, 0xd3, 0xb8,
	0xaf, 0xfa, 0xf1, 0xfa, 0x11, 0xda, 0xf7, 0x9d, 0xf6, 0x63, 0x74, 0xa4, 0xd3, 0x99, 0x33, 0xd8,
	0xc1, 0x69, 0x27, 0x6f, 0xee, 0x24, 0xed, 0xee, 0x4f, 0x7b, 0xab, 0xdd, 0xdf, 0xea, 0xe0, 0xbe,
	0x8a, 0x69, 0x18, 0x12, 0xa9, 0x62, 0x12, 0x33, 0xc1, 0x37, 0x48, 0x97, 0x6d, 0xf4, 0xef, 0x6f,
	0x44, 0x82, 0xb3, 0x58, 0x48, 0xc6, 0xdb, 0x99, 0x61, 0xad, 0x2b, 0x45, 0x2c, 0x50, 0x65, 0xd4,
	0xa4, 0x46, 0xba, 0xac, 0xd6, 0xbf, 0x5f, 0x3b, 0xd3, 0x5b, 0xfb, 0x74, 0x3c, 0x28, 0xe1, 0x31,
	0xe5, 0x9c, 0xa4, 0xef, 0x04, 0x6e, 0xed, 0x93, 0xf1, 0xca, 0xbe, 0x88, 0x22, 0xc1, 0xed, 0xcb,
	0xaa, 0xde, 0x1d, 0xaf, 0x2a, 0x64, 0x8b, 0xc5, 0xc9, 0xf3, 0xcd, 0x8a, 0x92, 0x04, 0x4c, 0x24,
	0xcf, 0x44, 0xb1, 0xfa, 0x7b, 0x0e, 0xca, 0x27, 0x92, 0x70, 0x15, 0xb1, 0x38, 0xa6, 0xd2, 0x15,
	0xfc, 0x94, 0xb5, 0x7b, 0xd2, 0x58, 0xa1, 0x1d, 0x80, 0x48, 0x04, 0xbd, 0xd0, 0xcc, 0xca, 0x4e,
	0xc5, 0x59, 0xbf, 0x5a, 0xbf, 0x5b, 0x1b, 0xff, 0xf5, 0x09, 0xe8, 0xd3, 0xa1, 0x3a, 0xce, 0x98,
	0xa2, 0xcf, 0x00, 0x31, 0xe5, 0xf9, 0x44, 0x4a, 0x46, 0xa5, 0x47, 0x39, 0x69, 0x85, 0x34, 0x28,
	0xe7, 0x2a, 0xce, 0x7a, 0x01, 0x97, 0x98, 0x72, 0x13, 0x41, 0x23, 0x59, 0x47, 0x65, 0x98, 0x6f,
	0xb1, 0x58, 0x92, 0x98, 0x96, 0x67, 0x2a, 0xce, 0xfa, 0x2c, 0x4e, 0xa7, 0x68, 0x17, 0x8a, 0x21,
	0xe3, 0xd4, 0xf3, 0x45, 0xc0, 0x78, 0xbb, 0x3c, 0x3b, 0x85, 0x47, 0x07, 0x8c, 0x53, 0xd7, 0xa8,
	0x63, 0x08, 0x87, 0x63, 0x54, 0x83, 0x95, 0x53, 0x16, 0xc6, 0x54, 0x7a, 0x2d, 0xc2, 0x83, 0x57,
	0x2c, 0x88, 0x3b, 0x5e, 0x67, 0x50, 0x9e, 0x33, 0xfb, 0x2d, 0x27, 0xa2, 0xad, 0x54, 0xb2, 0x3b,
	0x40, 0x75, 0xb8, 0xa1, 0x48, 0xd4, 0x0d, 0x19, 0x6f, 0x7b, 0xa7, 0x92, 0xfe, 0xd4, 0xa3, 0xdc,
	0x7f, 0xad, 0x2d, 0xf2, 0xc6, 0x62, 0x25, 0x15, 0x3e, 0x49, 0x65, 0xbb, 0x83, 0xea, 0x1f, 0x73,
	0x70, 0x03, 0x53, 0x9f, 0xb2, 0xfe, 0x3b, 0x0b, 0xec, 0xfb, 0xb0, 0x38, 0xe2, 0x7f, 0xce, 0x78,
	0x53, 0x6c, 0x4d, 0xe3, 0xf9, 0xcc, 0x44, 0xcf, 0xb3, 0x27, 0x30, 0xfb, 0xc6, 0x13, 0x98, 0xfb,
	0xf7, 0x27, 0xf0, 0x1c, 0xae, 0xab, 0xd7, 0xdc, 0xef, 0x48, 0xc1, 0xd9, 0xc0, 0x98, 0x79, 0xaf,
	0x84, 0x0c, 0x4c, 0x40, 0x8b, 0xf5, 0xea, 0x04, 0x48, 0x5b, 0x0e, 0x5b, 0x2c, 0x56, 0x78, 0xe5,
	0x9c, 0xfd, 0xb7, 0x42, 0x06, 0x68, 0x1f, 0xaa, 0x3a, 0xd5, 0x04, 0xef, 0x8b, 0xb0, 0xa7, 0x57,
	0x49, 0xa8, 0x9d, 0xa5, 0x5e, 0x40, 0x95, 0x2f, 0x49, 0xd4, 0xd2, 0xdf, 0x5a, 0x9e, 0x37, 0xa9,
	0x77, 0x87, 0x29, 0x37, 0xab, 0xe8, 0x8a, 0x80, 0x6e, 0x67, 0xd4, 0x90, 0x0b, 0xef, 0x4d, 0x02,
	0xb3, 0x01, 0x28, 0x18, 0xa0, 0x5b, 0x63, 0x81, 0x12, 0x95, 0xc9, 0x20, 0x8c, 0xf7, 0xa9, 0x8c,
	0x69, 0x50, 0x5e, 0x98, 0x08, 0xb2, 0x67, 0x55, 0xd0, 0x97, 0x70, 0x93, 0x29, 0x4f, 0x52, 0x1a,
	0x78, 0x4a, 0x84, 0x22, 0x12, 0x7c, 0x58, 0x46, 0x60, 0xac, 0xaf, 0x33, 0x85, 0x29, 0x0d, 0x9a,
	0x89, 0x30, 0x2d, 0xa5, 0xff, 0x03, 0x9c, 0x4a, 0x12, 0x51, 0x4f, 0xb1, 0x01, 0x2d, 0x17, 0x2b,
	0xce, 0xfa, 0x12, 0x5e, 0x30, 0x2b, 0x4d, 0x36, 0xa0, 0xe8, 0x6b, 0x58, 0x65, 0xca, 0x4b, 0x34,
	0xfc, 0x0e, 0xf5, 0x5f, 0xea, 0x24, 0x49, 0x71, 0x17, 0x0d, 0xee, 0xff, 0x98, 0x7a, 0xa2, 0xe5,
	0xae, 0x15, 0x5b, 0xe4, 0xea, 0x0e, 0x2c, 0x1f, 0x87, 0x84, 0x8f, 0xe6, 0x75, 0x1d, 0x66, 0xe2,
	0x90, 0x9a, 0x84, 0x2e, 0xd6, 0x2b, 0x13, 0x8e, 0x30, 0xe1, 0xa9, 0x93, 0x90, 0x62, 0xad, 0x5c,
	0xfd, 0x2b, 0x07, 0x6b, 0x3b, 0x52, 0xf4, 0x78, 0xd0, 0x4c, 0xf4, 0x46, 0x21, 0x7f, 0x84, 0x62,
	0x7c, 0xc6, 0x4f, 0x16, 0xfa, 0x61, 0xed, 0x32, 0x0a, 0xae, 0x4d, 0x22, 0x35, 0x9c, 0x85, 0x43,
	0x4d, 0x28, 0x48, 0x5b, 0xa1, 0xa6, 0x76, 0x8a, 0xf5, 0xaf, 0x2e, 0x87, 0x1e, 0x5b, 0xd3, 0x78,
	0x08, 0x84, 0x9e, 0xc2, 0xbc, 0x65, 0x78, 0x53, 0x63, 0xc5, 0xfa, 0x83, 0x09, 0x98, 0x69, 0x1f,
	0xd8, 0x4c, 0xde, 0xa3, 0x78, 0x29, 0x06, 0xda, 0x81, 0xd9, 0x6e, 0x48, 0xb8, 0xa9, 0xc4, 0xc9,
	0x58, 0x19, 0xff, 0x2e, 0x9c, 0x0b, 0x36, 0x00, 0x55, 0x0e, 0xa5, 0x4c, 0x54, 0x74, 0xb4, 0xa9,
	0xe6, 0x41, 0x9f, 0x72, 0xcd, 0x83, 0x23, 0xdc, 0xe0, 0x24, 0x3c, 0x98, 0x88, 0xb2, 0xcc, 0x70,
	0x0f, 0x96, 0x53, 0x1a, 0x0f, 0x69, 0x9f, 0x86, 0x5e, 0xd0, 0x8a, 0x4c, 0xe4, 0x1c, 0x7c, 0xcd,
	0x0a, 0x0e, 0xf4, 0xfa, 0x76, 0x2b, 0xaa, 0xfe, 0xe9, 0xc0, 0x72, 0x26, 0x27, 0xf5, 0x86, 0x3d,
	0x85, 0x30, 0xe4, 0x95, 0x19, 0x59, 0xde, 0x7b, 0x38, 0x4d, 0xc0, 0xcf, 0x81, 0xd4, 0x92, 0x17,
	0xb6, 0x48, 0x9a, 0xe3, 0x78, 0x2f, 0xf2, 0x7c, 0x21, 0x25, 0xf5, 0x63, 0x5d, 0x23, 0xac, 0xcd,
	0x49, 0xa8, 0x8c, 0x67, 0x4b, 0x78, 0x85, 0xf7, 0x22, 0x37, 0x95, 0x35, 0x13, 0x51, 0x75, 0x17,
	0xf2, 0xd6, 0xa3, 0x3c, 0xe4, 0x8e, 0xf6, 0x4b, 0x57, 0xd0, 0x75, 0x28, 0xed, 0x1d, 0x9e, 0x34,
	0xf0, 0x41, 0x63, 0xf3, 0x45, 0xc3, 0x6b, 0x60, 0x7c, 0x84, 0x4b, 0x0e, 0xaa, 0xc0, 0x6d, 0xf7,
	0x08, 0xe3, 0x86, 0x7b, 0xb2, 0x77, 0x74, 0xe8, 0xb9, 0x9b, 0xc7, 0x9b, 0xee, 0xde, 0xc9, 0xf7,
	0x5e, 0xe3, 0x3b, 0xb7, 0xd1, 0xd8, 0x6e, 0x6c, 0x97, 0x72, 0xd5, 0xbf, 0x67, 0x61, 0x29, 0xcd,
	0x89, 0x77, 0x1e, 0x55, 0xf4, 0x31, 0x5c, 0x63, 0xca, 0xeb, 0x76, 0x88, 0xa2, 0x5e, 0x28, 0xfc,
	0x97, 0x34, 0x30, 0x59, 0x56, 0xc0, 0x4b, 0x4c, 0x1d, 0xeb, 0xd5, 0x03, 0xb3, 0x88, 0x1e, 0xc1,
	0x1a, 0x53, 0x5e, 0x8b, 0xc5, 0xde, 0x19, 0x4d, 0x6a, 0xfc, 0xc4, 0x64, 0xd6, 0x98, 0xdc, 0x64,
	0x6a, 0x8b, 0xc5, 0xcd, 0x8c, 0xdc, 0x1a, 0x7f, 0x04, 0x57, 0xb9, 0x90, 0x11, 0x09, 0xd9, 0x40,
	0x47, 0x93, 0x4b, 0xc3, 0xf4, 0x0e, 0x5e, 0x3a, 0x5b, 0x6d, 0x72, 0x89, 0xbe, 0x81, 0xdb, 0x43,
	0xfe, 0x18, 0xb7, 0x4b, 0xde, 0xec, 0xb2, 0x6a, 0x29, 0x64, 0xcc, 0x3e, 0xbf, 0xc0, 0xad, 0x0b,
	0xc4, 0xa8, 0x39, 0xc8, 0x66, 0xc8, 0xbc, 0xc9, 0x90, 0x47, 0x97, 0x67, 0xc8, 0x79, 0xe2, 0x64,
	0xbc, 0x6d, 0x53, 0x64, 0xd5, 0x9f, 0x24, 0x42, 0x07, 0xf0, 0xc1, 0xd8, 0xcd, 0x75, 0xcc, 0xa8,
	0x94, 0x42, 0x7a, 0xa6, 0x03, 0x16, 0xcc, 0x97, 0xdf, 0x19, 0x83, 0xb3, 0xc5, 0xe2, 0x86, 0xd6,
	0xc3, 0xfa, 0xcc, 0x7d, 0x58, 0x19, 0xa1, 0x67, 0xfb, 0x09, 0x0b, 0xd3, 0x56, 0xed, 0x85, 0x24,
	0xc7, 0xcb, 0xf2, 0xfc, 0x52, 0xf5, 0xb7, 0x1c, 0x2c, 0x5a, 0xb6, 0x48, 0x32, 0xed, 0x10, 0xe6,
	0xc9, 0x80, 0x45, 0xbd, 0xb8, 0x63, 0xa9, 0xf1, 0x8b, 0xcb, 0x77, 0xca, 0x02, 0xd4, 0x36, 0x79,
	0x3b, 0xa4, 0x38, 0x05, 0x41, 0x18, 0x16, 0x68, 0x48, 0xfb, 0xc9, 0xc5, 0x24, 0xf7, 0x1f, 0x10,
	0xcf, 0x60, 0xd0, 0x0b, 0x58, 0xec, 0x8a, 0x90, 0x48, 0xdb, 0xa6, 0x4d, 0xba, 0x5e, 0xad, 0xd7,
	0xa7, 0x23, 0xc5, 0xe3, 0x8c, 0x25, 0x1e, 0xc1, 0x59, 0x7b, 0x0c, 0x73, 0x66, 0x2f, 0x7d, 0x5d,
	0xd1, 0xf7, 0x02, 0xc2, 0x03, 0x13, 0x04, 0x07, 0xa7, 0x53, 0xb4, 0x06, 0x85, 0x88, 0x12, 0xd5,
	0x93, 0xf6, 0xba, 0xe9, 0xe0, 0xe1, 0xbc, 0xfa, 0x6b, 0x0e, 0xd0, 0x48, 0xe3, 0x49, 0x22, 0x7a,
	0x32, 0xae, 0xe1, 0xd4, 0xdf, 0xaa, 0xe1, 0x18, 0xa0, 0xd1, 0x46, 0xb3, 0x7f, 0xa1, 0xd1, 0x6c,
	0x4c, 0xdf, 0x68, 0x12, 0xbc, 0xb3, 0x06, 0xb3, 0x7b, 0xbe, 0xc1, 0xd4, 0xde, 0xee, 0x88, 0x86,
	0xbd, 0xe5, 0xde, 0x33, 0x58, 0x9d, 0x58, 0x3a, 0x68, 0x11, 0x0a, 0xcf, 0x0f, 0x0f, 0x8e, 0xdc,
	0xfd, 0xc6, 0x76, 0xe9, 0x8a, 0x9e, 0xed, 0x79, 0x76, 0xe6, 0xe8, 0xd9, 0xb3, 0x74, 0x96, 0x43,
	0x00, 0x79, 0x3b, 0x9e, 0xd9, 0xfa, 0x19, 0x3e, 0xf4, 0x45, 0x74, 0xa9, 0x43, 0x5b, 0xd7, 0x9e,
	0x0e, 0xc7, 0xc7, 0xfa, 0x57, 0xe4, 0xd8, 0xf9, 0xe1, 0x71, 0x9b, 0xc5, 0x9d, 0x5e, 0x4b, 0x5f,
	0xf2, 0x36, 0x18, 0x3f, 0x15, 0x16, 0x83, 0x71, 0x7f, 0xa3, 0x2d, 0x3e, 0xbf, 0xec, 0x47, 0xad,
	0x95, 0x37, 0xbf, 0x34, 0x0f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xca, 0xba, 0xce, 0xd3,
	0x0d, 0x00, 0x00,
}
