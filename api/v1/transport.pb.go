// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stellarstation/api/v1/transport.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	monitoring "github.com/infostellarinc/go-stellarstation/api/v1/monitoring"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A type of framing of a binary payload used in satellite communicaation.
type Framing int32

const (
	// No framing done in the API. All payloads are assumed to be pre-framed and ready for
	// transmission to the satellite or API client with no additional processing.
	Framing_BITSTREAM Framing = 0
	// AX.25 (Amateur X.25) framing - https://en.wikipedia.org/wiki/AX.25
	Framing_AX25 Framing = 1
	// No framing or demodulation done in the API. Raw IQ data is sent to the API client with no
	// additional processing.
	Framing_IQ Framing = 2
	// A decoded PNG image frame.
	Framing_IMAGE_PNG Framing = 3
	// A decoded JPEG image.
	Framing_IMAGE_JPEG Framing = 4
	// Completely arbitrary, freeform text contained in a frame.
	Framing_FREE_TEXT_UTF8 Framing = 5
	// A waterfall diagram. This is actually for the whole plan and does not correspond to an
	// individual frame.
	Framing_WATERFALL Framing = 6
)

var Framing_name = map[int32]string{
	0: "BITSTREAM",
	1: "AX25",
	2: "IQ",
	3: "IMAGE_PNG",
	4: "IMAGE_JPEG",
	5: "FREE_TEXT_UTF8",
	6: "WATERFALL",
}

var Framing_value = map[string]int32{
	"BITSTREAM":      0,
	"AX25":           1,
	"IQ":             2,
	"IMAGE_PNG":      3,
	"IMAGE_JPEG":     4,
	"FREE_TEXT_UTF8": 5,
	"WATERFALL":      6,
}

func (x Framing) String() string {
	return proto.EnumName(Framing_name, int32(x))
}

func (Framing) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a5cbae65d14ae041, []int{0}
}

// A chunk or frame of telemetry data that has been received from a satellite.
type Telemetry struct {
	// The framing of this telemetry data. If `RAW`, this telemetry will be an arbitrarily sized
	// chunk of the bitstream.
	Framing Framing `protobuf:"varint,1,opt,name=framing,proto3,enum=stellarstation.api.v1.Framing" json:"framing,omitempty"`
	// The payload of this telemetry.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// The actual downlink frequency, in Hz, used when receiving `data`, including adjustments for
	// doppler shift.
	DownlinkFrequencyHz uint64 `protobuf:"varint,3,opt,name=downlink_frequency_hz,json=downlinkFrequencyHz,proto3" json:"downlink_frequency_hz,omitempty"`
	// Timestamp when the first byte of `data` was received.
	TimeFirstByteReceived *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time_first_byte_received,json=timeFirstByteReceived,proto3" json:"time_first_byte_received,omitempty"`
	// Timestamp when the last byte of `data` was received.
	TimeLastByteReceived *timestamp.Timestamp `protobuf:"bytes,5,opt,name=time_last_byte_received,json=timeLastByteReceived,proto3" json:"time_last_byte_received,omitempty"`
	// The binary header of the telemetry frame, if `framing` is not `RAW`.
	//
	// * AX25 - This is either Address + Control, or Address + Control + PID. The checksum is not
	//          returned.
	FrameHeader []byte `protobuf:"bytes,6,opt,name=frame_header,json=frameHeader,proto3" json:"frame_header,omitempty"`
	// The ID to be used to when creating a `ReceiveTelemetryAck.message_ack_id` response
	//
	// This value may not be available for Out-of-order-allowed-satellites
	//
	// Status: ALPHA This API is under development and may not work correctly or be changed in backwards
	//         incompatible ways in the future.
	MessageAckId         string   `protobuf:"bytes,7,opt,name=message_ack_id,json=messageAckId,proto3" json:"message_ack_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Telemetry) Reset()         { *m = Telemetry{} }
func (m *Telemetry) String() string { return proto.CompactTextString(m) }
func (*Telemetry) ProtoMessage()    {}
func (*Telemetry) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5cbae65d14ae041, []int{0}
}

func (m *Telemetry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Telemetry.Unmarshal(m, b)
}
func (m *Telemetry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Telemetry.Marshal(b, m, deterministic)
}
func (m *Telemetry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Telemetry.Merge(m, src)
}
func (m *Telemetry) XXX_Size() int {
	return xxx_messageInfo_Telemetry.Size(m)
}
func (m *Telemetry) XXX_DiscardUnknown() {
	xxx_messageInfo_Telemetry.DiscardUnknown(m)
}

var xxx_messageInfo_Telemetry proto.InternalMessageInfo

func (m *Telemetry) GetFraming() Framing {
	if m != nil {
		return m.Framing
	}
	return Framing_BITSTREAM
}

func (m *Telemetry) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Telemetry) GetDownlinkFrequencyHz() uint64 {
	if m != nil {
		return m.DownlinkFrequencyHz
	}
	return 0
}

func (m *Telemetry) GetTimeFirstByteReceived() *timestamp.Timestamp {
	if m != nil {
		return m.TimeFirstByteReceived
	}
	return nil
}

func (m *Telemetry) GetTimeLastByteReceived() *timestamp.Timestamp {
	if m != nil {
		return m.TimeLastByteReceived
	}
	return nil
}

func (m *Telemetry) GetFrameHeader() []byte {
	if m != nil {
		return m.FrameHeader
	}
	return nil
}

func (m *Telemetry) GetMessageAckId() string {
	if m != nil {
		return m.MessageAckId
	}
	return ""
}

// An event that occurred while processing the stream. A `StreamEvent` will have one of several
// types of event payloads corresponding to event types. Many of these payloads will be empty,
// depending on the context of an event, but are still returned as messages to allow future
// extension.
type StreamEvent struct {
	// The ID of the request this event corresponds to, copied from
	// `SatelliteStreamRequest.request_id` when present. If the event doesn't correspond to a request,
	// this is always empty.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// A stream event payload.
	//
	// Types that are valid to be assigned to Event:
	//	*StreamEvent_CommandSent
	//	*StreamEvent_PlanMonitoringEvent
	Event                isStreamEvent_Event `protobuf_oneof:"Event"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *StreamEvent) Reset()         { *m = StreamEvent{} }
func (m *StreamEvent) String() string { return proto.CompactTextString(m) }
func (*StreamEvent) ProtoMessage()    {}
func (*StreamEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5cbae65d14ae041, []int{1}
}

func (m *StreamEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamEvent.Unmarshal(m, b)
}
func (m *StreamEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamEvent.Marshal(b, m, deterministic)
}
func (m *StreamEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent.Merge(m, src)
}
func (m *StreamEvent) XXX_Size() int {
	return xxx_messageInfo_StreamEvent.Size(m)
}
func (m *StreamEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent proto.InternalMessageInfo

func (m *StreamEvent) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

type isStreamEvent_Event interface {
	isStreamEvent_Event()
}

type StreamEvent_CommandSent struct {
	CommandSent *StreamEvent_CommandSentFromGroundStation `protobuf:"bytes,2,opt,name=command_sent,json=commandSent,proto3,oneof"`
}

type StreamEvent_PlanMonitoringEvent struct {
	PlanMonitoringEvent *PlanMonitoringEvent `protobuf:"bytes,3,opt,name=plan_monitoring_event,json=planMonitoringEvent,proto3,oneof"`
}

func (*StreamEvent_CommandSent) isStreamEvent_Event() {}

func (*StreamEvent_PlanMonitoringEvent) isStreamEvent_Event() {}

func (m *StreamEvent) GetEvent() isStreamEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *StreamEvent) GetCommandSent() *StreamEvent_CommandSentFromGroundStation {
	if x, ok := m.GetEvent().(*StreamEvent_CommandSent); ok {
		return x.CommandSent
	}
	return nil
}

func (m *StreamEvent) GetPlanMonitoringEvent() *PlanMonitoringEvent {
	if x, ok := m.GetEvent().(*StreamEvent_PlanMonitoringEvent); ok {
		return x.PlanMonitoringEvent
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StreamEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StreamEvent_CommandSent)(nil),
		(*StreamEvent_PlanMonitoringEvent)(nil),
	}
}

// An event indicating the commands in the request were sent by the ground station through its
// radio.
type StreamEvent_CommandSentFromGroundStation struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamEvent_CommandSentFromGroundStation) Reset() {
	*m = StreamEvent_CommandSentFromGroundStation{}
}
func (m *StreamEvent_CommandSentFromGroundStation) String() string { return proto.CompactTextString(m) }
func (*StreamEvent_CommandSentFromGroundStation) ProtoMessage()    {}
func (*StreamEvent_CommandSentFromGroundStation) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5cbae65d14ae041, []int{1, 0}
}

func (m *StreamEvent_CommandSentFromGroundStation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamEvent_CommandSentFromGroundStation.Unmarshal(m, b)
}
func (m *StreamEvent_CommandSentFromGroundStation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamEvent_CommandSentFromGroundStation.Marshal(b, m, deterministic)
}
func (m *StreamEvent_CommandSentFromGroundStation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent_CommandSentFromGroundStation.Merge(m, src)
}
func (m *StreamEvent_CommandSentFromGroundStation) XXX_Size() int {
	return xxx_messageInfo_StreamEvent_CommandSentFromGroundStation.Size(m)
}
func (m *StreamEvent_CommandSentFromGroundStation) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent_CommandSentFromGroundStation.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent_CommandSentFromGroundStation proto.InternalMessageInfo

// A monitoring event that occurred during the execution of the plan. Information about the current
// configuration of the ground station and state of components is returned to provide information
// that can help to troubleshoot issues with the plan.
type PlanMonitoringEvent struct {
	// The ID of the plan being monitored.
	PlanId string `protobuf:"bytes,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	// Types that are valid to be assigned to Info:
	//	*PlanMonitoringEvent_GroundStationConfiguration
	//	*PlanMonitoringEvent_GroundStationState
	//	*PlanMonitoringEvent_GroundStationEvent
	Info                 isPlanMonitoringEvent_Info `protobuf_oneof:"Info"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PlanMonitoringEvent) Reset()         { *m = PlanMonitoringEvent{} }
func (m *PlanMonitoringEvent) String() string { return proto.CompactTextString(m) }
func (*PlanMonitoringEvent) ProtoMessage()    {}
func (*PlanMonitoringEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5cbae65d14ae041, []int{2}
}

func (m *PlanMonitoringEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlanMonitoringEvent.Unmarshal(m, b)
}
func (m *PlanMonitoringEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlanMonitoringEvent.Marshal(b, m, deterministic)
}
func (m *PlanMonitoringEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlanMonitoringEvent.Merge(m, src)
}
func (m *PlanMonitoringEvent) XXX_Size() int {
	return xxx_messageInfo_PlanMonitoringEvent.Size(m)
}
func (m *PlanMonitoringEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PlanMonitoringEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PlanMonitoringEvent proto.InternalMessageInfo

func (m *PlanMonitoringEvent) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

type isPlanMonitoringEvent_Info interface {
	isPlanMonitoringEvent_Info()
}

type PlanMonitoringEvent_GroundStationConfiguration struct {
	GroundStationConfiguration *monitoring.GroundStationConfiguration `protobuf:"bytes,2,opt,name=ground_station_configuration,json=groundStationConfiguration,proto3,oneof"`
}

type PlanMonitoringEvent_GroundStationState struct {
	GroundStationState *monitoring.GroundStationState `protobuf:"bytes,3,opt,name=ground_station_state,json=groundStationState,proto3,oneof"`
}

type PlanMonitoringEvent_GroundStationEvent struct {
	GroundStationEvent *monitoring.GroundStationEvent `protobuf:"bytes,4,opt,name=ground_station_event,json=groundStationEvent,proto3,oneof"`
}

func (*PlanMonitoringEvent_GroundStationConfiguration) isPlanMonitoringEvent_Info() {}

func (*PlanMonitoringEvent_GroundStationState) isPlanMonitoringEvent_Info() {}

func (*PlanMonitoringEvent_GroundStationEvent) isPlanMonitoringEvent_Info() {}

func (m *PlanMonitoringEvent) GetInfo() isPlanMonitoringEvent_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *PlanMonitoringEvent) GetGroundStationConfiguration() *monitoring.GroundStationConfiguration {
	if x, ok := m.GetInfo().(*PlanMonitoringEvent_GroundStationConfiguration); ok {
		return x.GroundStationConfiguration
	}
	return nil
}

func (m *PlanMonitoringEvent) GetGroundStationState() *monitoring.GroundStationState {
	if x, ok := m.GetInfo().(*PlanMonitoringEvent_GroundStationState); ok {
		return x.GroundStationState
	}
	return nil
}

func (m *PlanMonitoringEvent) GetGroundStationEvent() *monitoring.GroundStationEvent {
	if x, ok := m.GetInfo().(*PlanMonitoringEvent_GroundStationEvent); ok {
		return x.GroundStationEvent
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PlanMonitoringEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PlanMonitoringEvent_GroundStationConfiguration)(nil),
		(*PlanMonitoringEvent_GroundStationState)(nil),
		(*PlanMonitoringEvent_GroundStationEvent)(nil),
	}
}

func init() {
	proto.RegisterEnum("stellarstation.api.v1.Framing", Framing_name, Framing_value)
	proto.RegisterType((*Telemetry)(nil), "stellarstation.api.v1.Telemetry")
	proto.RegisterType((*StreamEvent)(nil), "stellarstation.api.v1.StreamEvent")
	proto.RegisterType((*StreamEvent_CommandSentFromGroundStation)(nil), "stellarstation.api.v1.StreamEvent.CommandSentFromGroundStation")
	proto.RegisterType((*PlanMonitoringEvent)(nil), "stellarstation.api.v1.PlanMonitoringEvent")
}

func init() {
	proto.RegisterFile("stellarstation/api/v1/transport.proto", fileDescriptor_a5cbae65d14ae041)
}

var fileDescriptor_a5cbae65d14ae041 = []byte{
	// 695 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x6f, 0x6f, 0xda, 0x3e,
	0x10, 0x26, 0x94, 0xc2, 0x0f, 0xc3, 0x0f, 0x21, 0xb7, 0xa8, 0x0c, 0x75, 0x1d, 0xab, 0x36, 0x09,
	0x55, 0x5a, 0x50, 0xd9, 0x26, 0xf5, 0xc5, 0xa4, 0x09, 0xaa, 0xf0, 0x67, 0x6a, 0x27, 0x1a, 0x32,
	0xad, 0xda, 0x1b, 0xcf, 0x24, 0x26, 0x58, 0x4d, 0x6c, 0xe6, 0x18, 0x26, 0xfa, 0x6a, 0x5f, 0x60,
	0x1f, 0x61, 0x5f, 0x75, 0x9a, 0xe2, 0x24, 0x2d, 0x6d, 0x61, 0xd3, 0xf6, 0x2a, 0xf6, 0xdd, 0x3d,
	0xcf, 0xdd, 0x3d, 0x97, 0x33, 0x78, 0x1e, 0x48, 0xe2, 0x79, 0x58, 0x04, 0x12, 0x4b, 0xca, 0x59,
	0x13, 0xcf, 0x68, 0x73, 0x71, 0xdc, 0x94, 0x02, 0xb3, 0x60, 0xc6, 0x85, 0xd4, 0x67, 0x82, 0x4b,
	0x0e, 0x2b, 0x77, 0xc3, 0x74, 0x3c, 0xa3, 0xfa, 0xe2, 0xb8, 0xf6, 0xc4, 0xe5, 0xdc, 0xf5, 0x48,
	0x53, 0x05, 0x8d, 0xe7, 0x93, 0xa6, 0xa4, 0x3e, 0x09, 0x24, 0xf6, 0x67, 0x11, 0xae, 0x76, 0xbc,
	0x9e, 0xde, 0xe7, 0x8c, 0x4a, 0x2e, 0x28, 0x73, 0x57, 0x8e, 0x11, 0xe4, 0xf0, 0x67, 0x1a, 0xe4,
	0x2d, 0xe2, 0x11, 0x9f, 0x48, 0xb1, 0x84, 0x27, 0x20, 0x37, 0x11, 0xd8, 0xa7, 0xcc, 0xad, 0x6a,
	0x75, 0xad, 0x51, 0x6a, 0x1d, 0xe8, 0x6b, 0x4b, 0xd1, 0xbb, 0x51, 0x94, 0x99, 0x84, 0x43, 0x08,
	0x32, 0x0e, 0x96, 0xb8, 0x9a, 0xae, 0x6b, 0x8d, 0xa2, 0xa9, 0xce, 0xb0, 0x05, 0x2a, 0x0e, 0xff,
	0xca, 0x3c, 0xca, 0xae, 0xd0, 0x44, 0x90, 0x2f, 0x73, 0xc2, 0xec, 0x25, 0x9a, 0x5e, 0x57, 0xb7,
	0xea, 0x5a, 0x23, 0x63, 0xee, 0x24, 0xce, 0x6e, 0xe2, 0xeb, 0x5f, 0xc3, 0x11, 0xa8, 0x86, 0x5d,
	0xa1, 0x09, 0x15, 0x81, 0x44, 0xe3, 0xa5, 0x24, 0x48, 0x10, 0x9b, 0xd0, 0x05, 0x71, 0xaa, 0x99,
	0xba, 0xd6, 0x28, 0xb4, 0x6a, 0x7a, 0x24, 0x83, 0x9e, 0xc8, 0xa0, 0x5b, 0x89, 0x0c, 0x66, 0x25,
	0xc4, 0x76, 0x43, 0x68, 0x67, 0x29, 0x89, 0x19, 0x03, 0xe1, 0x05, 0xd8, 0x53, 0xa4, 0x1e, 0x7e,
	0xc0, 0xb9, 0xfd, 0x47, 0xce, 0xdd, 0x10, 0x7a, 0x86, 0xef, 0x51, 0x3e, 0x05, 0xc5, 0xb0, 0x75,
	0x82, 0xa6, 0x04, 0x3b, 0x44, 0x54, 0xb3, 0xaa, 0xef, 0x82, 0xb2, 0xf5, 0x95, 0x09, 0x3e, 0x03,
	0x25, 0x9f, 0x04, 0x01, 0x76, 0x09, 0xc2, 0xf6, 0x15, 0xa2, 0x4e, 0x35, 0x57, 0xd7, 0x1a, 0x79,
	0xb3, 0x18, 0x5b, 0xdb, 0xf6, 0xd5, 0xc0, 0x39, 0xfc, 0x91, 0x06, 0x85, 0x91, 0x14, 0x04, 0xfb,
	0xc6, 0x82, 0x30, 0x09, 0x1f, 0x03, 0xa0, 0xe4, 0x08, 0x64, 0x88, 0xd0, 0x14, 0x22, 0x1f, 0x5b,
	0x06, 0x0e, 0x74, 0x40, 0xd1, 0xe6, 0xbe, 0x8f, 0x99, 0x83, 0x02, 0xc2, 0xa4, 0xd2, 0xbb, 0xd0,
	0x7a, 0xbb, 0x61, 0x4c, 0x2b, 0xc4, 0xfa, 0x69, 0x04, 0x1b, 0x11, 0x26, 0xbb, 0x82, 0xfb, 0x3d,
	0xc1, 0xe7, 0xcc, 0x19, 0x45, 0xf1, 0xfd, 0x94, 0x59, 0xb0, 0x6f, 0xfd, 0xf0, 0x33, 0xa8, 0xcc,
	0x3c, 0xcc, 0xd0, 0xed, 0xef, 0x82, 0x48, 0x48, 0xa2, 0x26, 0x57, 0x68, 0x1d, 0x6d, 0x48, 0x37,
	0xf4, 0x30, 0x3b, 0xbf, 0x81, 0xa8, 0xb4, 0xfd, 0x94, 0xb9, 0x33, 0x7b, 0x68, 0xae, 0x1d, 0x80,
	0xfd, 0xdf, 0x15, 0xd4, 0xc9, 0x81, 0x6d, 0x15, 0x78, 0xf8, 0x7d, 0x0b, 0xec, 0xac, 0xe1, 0x85,
	0x7b, 0x20, 0xa7, 0x4a, 0xbc, 0x11, 0x29, 0x1b, 0x5e, 0x07, 0x0e, 0xfc, 0xa6, 0x81, 0x7d, 0x57,
	0x71, 0xa1, 0xb8, 0x3c, 0x64, 0x73, 0x36, 0xa1, 0xee, 0x5c, 0xa8, 0x5b, 0x2c, 0xd9, 0x9b, 0x0d,
	0x3d, 0xac, 0x6c, 0xc8, 0x9d, 0x8a, 0x4e, 0x57, 0x39, 0xfa, 0x29, 0xb3, 0xe6, 0x6e, 0xf4, 0xc2,
	0x29, 0xd8, 0xbd, 0x57, 0x41, 0xf8, 0x25, 0xb1, 0x7a, 0xaf, 0xfe, 0x32, 0x73, 0xf8, 0x21, 0xfd,
	0x94, 0x09, 0xdd, 0x07, 0xd6, 0x35, 0x99, 0xa2, 0x39, 0x65, 0xfe, 0x29, 0x53, 0x32, 0xb1, 0xbb,
	0x99, 0x94, 0xb5, 0x93, 0x05, 0x99, 0x01, 0x9b, 0xf0, 0x23, 0x0f, 0xe4, 0xe2, 0xe5, 0x87, 0xff,
	0x83, 0x7c, 0x67, 0x60, 0x8d, 0x2c, 0xd3, 0x68, 0x9f, 0x97, 0x53, 0xf0, 0x3f, 0x90, 0x69, 0x5f,
	0xb6, 0x5e, 0x97, 0x35, 0x98, 0x05, 0xe9, 0xc1, 0x45, 0x39, 0x1d, 0x06, 0x0c, 0xce, 0xdb, 0x3d,
	0x03, 0x0d, 0xdf, 0xf7, 0xca, 0x5b, 0xb0, 0x04, 0x40, 0x74, 0x7d, 0x37, 0x34, 0x7a, 0xe5, 0x0c,
	0x84, 0xa0, 0xd4, 0x35, 0x0d, 0x03, 0x59, 0xc6, 0xa5, 0x85, 0x3e, 0x58, 0xdd, 0x93, 0xf2, 0x76,
	0x08, 0xf9, 0xd8, 0xb6, 0x0c, 0xb3, 0xdb, 0x3e, 0x3b, 0x2b, 0x67, 0x3b, 0x18, 0x3c, 0xb2, 0xb9,
	0xbf, 0xbe, 0x8d, 0x4e, 0xc9, 0x4a, 0xde, 0xcd, 0x61, 0xb8, 0xb6, 0x43, 0xed, 0x53, 0xcb, 0xa5,
	0x72, 0x3a, 0x1f, 0xeb, 0x36, 0xf7, 0x9b, 0x94, 0x4d, 0x78, 0x8c, 0xa3, 0xcc, 0x6e, 0xba, 0xfc,
	0xc5, 0xda, 0xd7, 0x71, 0x9c, 0x55, 0x3b, 0xff, 0xf2, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x78,
	0x39, 0x49, 0x27, 0x9c, 0x05, 0x00, 0x00,
}
