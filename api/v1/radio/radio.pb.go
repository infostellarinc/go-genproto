// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stellarstation/api/v1/radio/radio.proto

package radio

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type of modulation. Modulation is the process of converting binary data (0's and 1's) to
// an analog wave for use in radio communication.
type Modulation int32

const (
	// Indicates modulation is disabled and raw I/Q is being used.
	Modulation_DISABLED Modulation = 0
	// Frequency Shift Keying. https://en.wikipedia.org/wiki/Frequency-shift_keying
	Modulation_FSK Modulation = 1
	// Audio Frequency Shift Keying. https://en.wikipedia.org/wiki/Frequency-shift_keying#Audio_FSK
	Modulation_AFSK Modulation = 2
	// Binary Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying#Binary_phase-shift_keying_(BPSK)
	Modulation_BPSK Modulation = 3
	// Multiple Frequency Shift Keying. https://en.wikipedia.org/wiki/Multiple_frequency-shift_keying
	Modulation_MFSK Modulation = 4
	// Quadrature Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying#Quadrature_phase-shift_keying_(QPSK)
	Modulation_QPSK Modulation = 5
	// 8-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
	Modulation_PSK8 Modulation = 6
	// 16-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
	Modulation_PSK16 Modulation = 7
	// 32-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
	Modulation_PSK32 Modulation = 8
	// 64-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
	Modulation_PSK64 Modulation = 9
	// 128-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
	Modulation_PSK128 Modulation = 10
	// 256-Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying
	Modulation_PSK256 Modulation = 11
	// Offset Quadrature Phase Shift Keying. https://en.wikipedia.org/wiki/Phase-shift_keying#Offset_QPSK_(OQPSK)
	Modulation_OQPSK Modulation = 12
	// 8-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
	Modulation_QAM8 Modulation = 13
	// 16-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
	Modulation_QAM16 Modulation = 14
	// 32-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
	Modulation_QAM32 Modulation = 15
	// 64-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
	Modulation_QAM64 Modulation = 16
	// 128-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
	Modulation_QAM128 Modulation = 17
	// 256-Phase Amplitude Modulation. https://en.wikipedia.org/wiki/Quadrature_amplitude_modulation
	Modulation_QAM256 Modulation = 18
	// Minimum Shift Keying. https://en.wikipedia.org/wiki/Minimum-shift_keying
	Modulation_MSK Modulation = 19
	// Gaussian Minimum Shift Keying. https://en.wikipedia.org/wiki/Minimum-shift_keying#Gaussian_minimum-shift_keying
	Modulation_GMSK Modulation = 20
	// Amplitude modulation (generic)
	Modulation_AM Modulation = 21
	// Frequency modulation (generic)
	Modulation_FM Modulation = 22
	// Phase modulation (generic)
	Modulation_PM Modulation = 23
)

var Modulation_name = map[int32]string{
	0:  "DISABLED",
	1:  "FSK",
	2:  "AFSK",
	3:  "BPSK",
	4:  "MFSK",
	5:  "QPSK",
	6:  "PSK8",
	7:  "PSK16",
	8:  "PSK32",
	9:  "PSK64",
	10: "PSK128",
	11: "PSK256",
	12: "OQPSK",
	13: "QAM8",
	14: "QAM16",
	15: "QAM32",
	16: "QAM64",
	17: "QAM128",
	18: "QAM256",
	19: "MSK",
	20: "GMSK",
	21: "AM",
	22: "FM",
	23: "PM",
}

var Modulation_value = map[string]int32{
	"DISABLED": 0,
	"FSK":      1,
	"AFSK":     2,
	"BPSK":     3,
	"MFSK":     4,
	"QPSK":     5,
	"PSK8":     6,
	"PSK16":    7,
	"PSK32":    8,
	"PSK64":    9,
	"PSK128":   10,
	"PSK256":   11,
	"OQPSK":    12,
	"QAM8":     13,
	"QAM16":    14,
	"QAM32":    15,
	"QAM64":    16,
	"QAM128":   17,
	"QAM256":   18,
	"MSK":      19,
	"GMSK":     20,
	"AM":       21,
	"FM":       22,
	"PM":       23,
}

func (x Modulation) String() string {
	return proto.EnumName(Modulation_name, int32(x))
}

func (Modulation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{0}
}

// Line coding applied during modulation. Line coding is the technique for modeling binary 0 and 1
// within a modulated waveform.
type LineCoding int32

const (
	// Non-return-to-zero level.
	// https://en.wikipedia.org/wiki/Non-return-to-zero
	LineCoding_NRZ_L LineCoding = 0
	// Non-return-to-zero mark (i.e., differential encoding).
	// https://en.wikipedia.org/wiki/Non-return-to-zero
	LineCoding_NRZ_M LineCoding = 1
	// Non-return-to-zero space (i.e., non-differential-encoding).
	// https://en.wikipedia.org/wiki/Non-return-to-zero
	LineCoding_NRZ_S LineCoding = 2
	// Differential non-return-to-zero.
	// https://en.wikipedia.org/wiki/Return-to-zero
	LineCoding_DNRZ LineCoding = 3
	// Bipolar return-to-zero level.
	// https://en.wikipedia.org/wiki/Bipolar_encoding
	LineCoding_BP_L LineCoding = 4
	// Bipolar return-to-zero mark (i.e., differential encoding).
	// https://en.wikipedia.org/wiki/Bipolar_encoding
	LineCoding_BP_M LineCoding = 5
	// Bipolar return-to-zero space (i.e., non-differential encoding).
	// https://en.wikipedia.org/wiki/Bipolar_encoding
	LineCoding_BP_S LineCoding = 6
)

var LineCoding_name = map[int32]string{
	0: "NRZ_L",
	1: "NRZ_M",
	2: "NRZ_S",
	3: "DNRZ",
	4: "BP_L",
	5: "BP_M",
	6: "BP_S",
}

var LineCoding_value = map[string]int32{
	"NRZ_L": 0,
	"NRZ_M": 1,
	"NRZ_S": 2,
	"DNRZ":  3,
	"BP_L":  4,
	"BP_M":  5,
	"BP_S":  6,
}

func (x LineCoding) String() string {
	return proto.EnumName(LineCoding_name, int32(x))
}

func (LineCoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{1}
}

// Polynomial inversion.
type CCSDSConvolutionalCodingParams_PolynomialInversion int32

const (
	// CCSDS transfer frame with normal phase rotation.
	CCSDSConvolutionalCodingParams_G1_G2 CCSDSConvolutionalCodingParams_PolynomialInversion = 0
	// CCSDS transfer frame with inverted phase rotation.
	CCSDSConvolutionalCodingParams_G1_G2_INVERTED CCSDSConvolutionalCodingParams_PolynomialInversion = 1
	// G2-inverted G1.
	CCSDSConvolutionalCodingParams_G2_INVERTED_G1 CCSDSConvolutionalCodingParams_PolynomialInversion = 2
	// G2-G1.
	CCSDSConvolutionalCodingParams_G2_G1 CCSDSConvolutionalCodingParams_PolynomialInversion = 3
)

var CCSDSConvolutionalCodingParams_PolynomialInversion_name = map[int32]string{
	0: "G1_G2",
	1: "G1_G2_INVERTED",
	2: "G2_INVERTED_G1",
	3: "G2_G1",
}

var CCSDSConvolutionalCodingParams_PolynomialInversion_value = map[string]int32{
	"G1_G2":          0,
	"G1_G2_INVERTED": 1,
	"G2_INVERTED_G1": 2,
	"G2_G1":          3,
}

func (x CCSDSConvolutionalCodingParams_PolynomialInversion) String() string {
	return proto.EnumName(CCSDSConvolutionalCodingParams_PolynomialInversion_name, int32(x))
}

func (CCSDSConvolutionalCodingParams_PolynomialInversion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{2, 0}
}

// Enum describing different rates for puncturing.
type CCSDSConvolutionalCodingParams_Puncturing int32

const (
	// No puncturing.
	CCSDSConvolutionalCodingParams_OFF CCSDSConvolutionalCodingParams_Puncturing = 0
	// Puncturing rate 2/3.
	CCSDSConvolutionalCodingParams_PUNCTURE_2_3 CCSDSConvolutionalCodingParams_Puncturing = 1
	// Puncturing rate 3/4.
	CCSDSConvolutionalCodingParams_PUNCTURE_3_4 CCSDSConvolutionalCodingParams_Puncturing = 2
	// Puncturing rate 4/5.
	CCSDSConvolutionalCodingParams_PUNCTURE_4_5 CCSDSConvolutionalCodingParams_Puncturing = 3
	// Puncturing rate 5/6.
	CCSDSConvolutionalCodingParams_PUNCTURE_5_6 CCSDSConvolutionalCodingParams_Puncturing = 4
	// Puncturing rate 6/7.
	CCSDSConvolutionalCodingParams_PUNCTURE_6_7 CCSDSConvolutionalCodingParams_Puncturing = 5
	// Puncturing rate 7/8.
	CCSDSConvolutionalCodingParams_PUNCTURE_7_8 CCSDSConvolutionalCodingParams_Puncturing = 6
)

var CCSDSConvolutionalCodingParams_Puncturing_name = map[int32]string{
	0: "OFF",
	1: "PUNCTURE_2_3",
	2: "PUNCTURE_3_4",
	3: "PUNCTURE_4_5",
	4: "PUNCTURE_5_6",
	5: "PUNCTURE_6_7",
	6: "PUNCTURE_7_8",
}

var CCSDSConvolutionalCodingParams_Puncturing_value = map[string]int32{
	"OFF":          0,
	"PUNCTURE_2_3": 1,
	"PUNCTURE_3_4": 2,
	"PUNCTURE_4_5": 3,
	"PUNCTURE_5_6": 4,
	"PUNCTURE_6_7": 5,
	"PUNCTURE_7_8": 6,
}

func (x CCSDSConvolutionalCodingParams_Puncturing) String() string {
	return proto.EnumName(CCSDSConvolutionalCodingParams_Puncturing_name, int32(x))
}

func (CCSDSConvolutionalCodingParams_Puncturing) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{2, 1}
}

// Enum defining RS Code block length.
type CCSDSReedSolomonParams_BlockLengthType int32

const (
	// (255, 223, 16) RS code.
	CCSDSReedSolomonParams_RS_223_255 CCSDSReedSolomonParams_BlockLengthType = 0
	// (255, 239, 8) RS code.
	CCSDSReedSolomonParams_RS_239_255 CCSDSReedSolomonParams_BlockLengthType = 1
)

var CCSDSReedSolomonParams_BlockLengthType_name = map[int32]string{
	0: "RS_223_255",
	1: "RS_239_255",
}

var CCSDSReedSolomonParams_BlockLengthType_value = map[string]int32{
	"RS_223_255": 0,
	"RS_239_255": 1,
}

func (x CCSDSReedSolomonParams_BlockLengthType) String() string {
	return proto.EnumName(CCSDSReedSolomonParams_BlockLengthType_name, int32(x))
}

func (CCSDSReedSolomonParams_BlockLengthType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{4, 0}
}

// A type of scrambling.
type ScramblingParams_Type int32

const (
	// Additive scrambling.
	ScramblingParams_ADDITIVE ScramblingParams_Type = 0
	// Multiplicative scrambling.
	ScramblingParams_MULTIPLICATIVE ScramblingParams_Type = 1
)

var ScramblingParams_Type_name = map[int32]string{
	0: "ADDITIVE",
	1: "MULTIPLICATIVE",
}

var ScramblingParams_Type_value = map[string]int32{
	"ADDITIVE":       0,
	"MULTIPLICATIVE": 1,
}

func (x ScramblingParams_Type) String() string {
	return proto.EnumName(ScramblingParams_Type_name, int32(x))
}

func (ScramblingParams_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{11, 0}
}

// A radio device for RF communication. Usually, a satellite will have one or more radio devices for
// communicating with the ground and a ground station will have one or more radio devices for
// communicating with the satellite. Such devices may not actually correspond to actual hardware
// devices, i.e., in the case of Software Defined Radio (SDR).
type RadioDeviceConfiguration struct {
	// The center frequency of the device, in Hz.
	CenterFrequencyHz uint64 `protobuf:"varint,1,opt,name=center_frequency_hz,json=centerFrequencyHz,proto3" json:"center_frequency_hz,omitempty"`
	// The type of modulation used by this radio device.
	Modulation Modulation `protobuf:"varint,2,opt,name=modulation,proto3,enum=stellarstation.api.v1.radio.Modulation" json:"modulation,omitempty"`
	// The bitrate used during modulation.
	Bitrate uint64 `protobuf:"varint,3,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	// The protocol used by this device when doing RF communication. If unset, the device is only
	// demodulating / modulating without applying any higher-level communication protocol.
	Protocol             *CommunicationProtocol `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RadioDeviceConfiguration) Reset()         { *m = RadioDeviceConfiguration{} }
func (m *RadioDeviceConfiguration) String() string { return proto.CompactTextString(m) }
func (*RadioDeviceConfiguration) ProtoMessage()    {}
func (*RadioDeviceConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{0}
}

func (m *RadioDeviceConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RadioDeviceConfiguration.Unmarshal(m, b)
}
func (m *RadioDeviceConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RadioDeviceConfiguration.Marshal(b, m, deterministic)
}
func (m *RadioDeviceConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RadioDeviceConfiguration.Merge(m, src)
}
func (m *RadioDeviceConfiguration) XXX_Size() int {
	return xxx_messageInfo_RadioDeviceConfiguration.Size(m)
}
func (m *RadioDeviceConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_RadioDeviceConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_RadioDeviceConfiguration proto.InternalMessageInfo

func (m *RadioDeviceConfiguration) GetCenterFrequencyHz() uint64 {
	if m != nil {
		return m.CenterFrequencyHz
	}
	return 0
}

func (m *RadioDeviceConfiguration) GetModulation() Modulation {
	if m != nil {
		return m.Modulation
	}
	return Modulation_DISABLED
}

func (m *RadioDeviceConfiguration) GetBitrate() uint64 {
	if m != nil {
		return m.Bitrate
	}
	return 0
}

func (m *RadioDeviceConfiguration) GetProtocol() *CommunicationProtocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

// A communication protocol used with a radio device. These must contain all the parameters
// needed to configure the device for use either in transmission or reception.
type CommunicationProtocol struct {
	// Types that are valid to be assigned to Framing:
	//	*CommunicationProtocol_Ax25
	//	*CommunicationProtocol_Ccsds
	//	*CommunicationProtocol_Bitstream
	//	*CommunicationProtocol_AsmGolay
	Framing              isCommunicationProtocol_Framing `protobuf_oneof:"Framing"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CommunicationProtocol) Reset()         { *m = CommunicationProtocol{} }
func (m *CommunicationProtocol) String() string { return proto.CompactTextString(m) }
func (*CommunicationProtocol) ProtoMessage()    {}
func (*CommunicationProtocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{1}
}

func (m *CommunicationProtocol) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommunicationProtocol.Unmarshal(m, b)
}
func (m *CommunicationProtocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommunicationProtocol.Marshal(b, m, deterministic)
}
func (m *CommunicationProtocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunicationProtocol.Merge(m, src)
}
func (m *CommunicationProtocol) XXX_Size() int {
	return xxx_messageInfo_CommunicationProtocol.Size(m)
}
func (m *CommunicationProtocol) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunicationProtocol.DiscardUnknown(m)
}

var xxx_messageInfo_CommunicationProtocol proto.InternalMessageInfo

type isCommunicationProtocol_Framing interface {
	isCommunicationProtocol_Framing()
}

type CommunicationProtocol_Ax25 struct {
	Ax25 *AX25 `protobuf:"bytes,1,opt,name=ax25,proto3,oneof"`
}

type CommunicationProtocol_Ccsds struct {
	Ccsds *CCSDSTransferFrame `protobuf:"bytes,2,opt,name=ccsds,proto3,oneof"`
}

type CommunicationProtocol_Bitstream struct {
	Bitstream *Bitstream `protobuf:"bytes,3,opt,name=bitstream,proto3,oneof"`
}

type CommunicationProtocol_AsmGolay struct {
	AsmGolay *ASMGolay `protobuf:"bytes,4,opt,name=asm_golay,json=asmGolay,proto3,oneof"`
}

func (*CommunicationProtocol_Ax25) isCommunicationProtocol_Framing() {}

func (*CommunicationProtocol_Ccsds) isCommunicationProtocol_Framing() {}

func (*CommunicationProtocol_Bitstream) isCommunicationProtocol_Framing() {}

func (*CommunicationProtocol_AsmGolay) isCommunicationProtocol_Framing() {}

func (m *CommunicationProtocol) GetFraming() isCommunicationProtocol_Framing {
	if m != nil {
		return m.Framing
	}
	return nil
}

func (m *CommunicationProtocol) GetAx25() *AX25 {
	if x, ok := m.GetFraming().(*CommunicationProtocol_Ax25); ok {
		return x.Ax25
	}
	return nil
}

func (m *CommunicationProtocol) GetCcsds() *CCSDSTransferFrame {
	if x, ok := m.GetFraming().(*CommunicationProtocol_Ccsds); ok {
		return x.Ccsds
	}
	return nil
}

func (m *CommunicationProtocol) GetBitstream() *Bitstream {
	if x, ok := m.GetFraming().(*CommunicationProtocol_Bitstream); ok {
		return x.Bitstream
	}
	return nil
}

func (m *CommunicationProtocol) GetAsmGolay() *ASMGolay {
	if x, ok := m.GetFraming().(*CommunicationProtocol_AsmGolay); ok {
		return x.AsmGolay
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CommunicationProtocol) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CommunicationProtocol_Ax25)(nil),
		(*CommunicationProtocol_Ccsds)(nil),
		(*CommunicationProtocol_Bitstream)(nil),
		(*CommunicationProtocol_AsmGolay)(nil),
	}
}

// CCSDS-specific convolutional coding parameters.
// Code rate (r): 1/2
// Constraint length (K): 7
// Connection vectors:
//   G1 = 1111001
//   G2 = 1011011
type CCSDSConvolutionalCodingParams struct {
	PolynomialInversion CCSDSConvolutionalCodingParams_PolynomialInversion `protobuf:"varint,1,opt,name=polynomial_inversion,json=polynomialInversion,proto3,enum=stellarstation.api.v1.radio.CCSDSConvolutionalCodingParams_PolynomialInversion" json:"polynomial_inversion,omitempty"`
	// Optional puncturing for convolutional code.
	Puncturing           CCSDSConvolutionalCodingParams_Puncturing `protobuf:"varint,2,opt,name=puncturing,proto3,enum=stellarstation.api.v1.radio.CCSDSConvolutionalCodingParams_Puncturing" json:"puncturing,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *CCSDSConvolutionalCodingParams) Reset()         { *m = CCSDSConvolutionalCodingParams{} }
func (m *CCSDSConvolutionalCodingParams) String() string { return proto.CompactTextString(m) }
func (*CCSDSConvolutionalCodingParams) ProtoMessage()    {}
func (*CCSDSConvolutionalCodingParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{2}
}

func (m *CCSDSConvolutionalCodingParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCSDSConvolutionalCodingParams.Unmarshal(m, b)
}
func (m *CCSDSConvolutionalCodingParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCSDSConvolutionalCodingParams.Marshal(b, m, deterministic)
}
func (m *CCSDSConvolutionalCodingParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSDSConvolutionalCodingParams.Merge(m, src)
}
func (m *CCSDSConvolutionalCodingParams) XXX_Size() int {
	return xxx_messageInfo_CCSDSConvolutionalCodingParams.Size(m)
}
func (m *CCSDSConvolutionalCodingParams) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSDSConvolutionalCodingParams.DiscardUnknown(m)
}

var xxx_messageInfo_CCSDSConvolutionalCodingParams proto.InternalMessageInfo

func (m *CCSDSConvolutionalCodingParams) GetPolynomialInversion() CCSDSConvolutionalCodingParams_PolynomialInversion {
	if m != nil {
		return m.PolynomialInversion
	}
	return CCSDSConvolutionalCodingParams_G1_G2
}

func (m *CCSDSConvolutionalCodingParams) GetPuncturing() CCSDSConvolutionalCodingParams_Puncturing {
	if m != nil {
		return m.Puncturing
	}
	return CCSDSConvolutionalCodingParams_OFF
}

// CCSDS-specific scrambling parameters.
// Additive scrambler with pseudo-random sequence generated by the polynomial:
// h(x) = x^8 + x^7 + x^5 + x^3 + 1
type CCSDSScramblingParams struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CCSDSScramblingParams) Reset()         { *m = CCSDSScramblingParams{} }
func (m *CCSDSScramblingParams) String() string { return proto.CompactTextString(m) }
func (*CCSDSScramblingParams) ProtoMessage()    {}
func (*CCSDSScramblingParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{3}
}

func (m *CCSDSScramblingParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCSDSScramblingParams.Unmarshal(m, b)
}
func (m *CCSDSScramblingParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCSDSScramblingParams.Marshal(b, m, deterministic)
}
func (m *CCSDSScramblingParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSDSScramblingParams.Merge(m, src)
}
func (m *CCSDSScramblingParams) XXX_Size() int {
	return xxx_messageInfo_CCSDSScramblingParams.Size(m)
}
func (m *CCSDSScramblingParams) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSDSScramblingParams.DiscardUnknown(m)
}

var xxx_messageInfo_CCSDSScramblingParams proto.InternalMessageInfo

// CCSDS-specific Reed-Solomon parameters.
type CCSDSReedSolomonParams struct {
	// Block length type for RS code.
	BlockLengthType      CCSDSReedSolomonParams_BlockLengthType `protobuf:"varint,1,opt,name=block_length_type,json=blockLengthType,proto3,enum=stellarstation.api.v1.radio.CCSDSReedSolomonParams_BlockLengthType" json:"block_length_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *CCSDSReedSolomonParams) Reset()         { *m = CCSDSReedSolomonParams{} }
func (m *CCSDSReedSolomonParams) String() string { return proto.CompactTextString(m) }
func (*CCSDSReedSolomonParams) ProtoMessage()    {}
func (*CCSDSReedSolomonParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{4}
}

func (m *CCSDSReedSolomonParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCSDSReedSolomonParams.Unmarshal(m, b)
}
func (m *CCSDSReedSolomonParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCSDSReedSolomonParams.Marshal(b, m, deterministic)
}
func (m *CCSDSReedSolomonParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSDSReedSolomonParams.Merge(m, src)
}
func (m *CCSDSReedSolomonParams) XXX_Size() int {
	return xxx_messageInfo_CCSDSReedSolomonParams.Size(m)
}
func (m *CCSDSReedSolomonParams) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSDSReedSolomonParams.DiscardUnknown(m)
}

var xxx_messageInfo_CCSDSReedSolomonParams proto.InternalMessageInfo

func (m *CCSDSReedSolomonParams) GetBlockLengthType() CCSDSReedSolomonParams_BlockLengthType {
	if m != nil {
		return m.BlockLengthType
	}
	return CCSDSReedSolomonParams_RS_223_255
}

// https://public.ccsds.org/Pubs/131x0b3e1.pdf
//
// CCSDS transfer frames allow for a few common variations satellites use such as setting a
// custom synchronization word, inverting the convolutional coding polynomials,
// etc. The sequence of error-correcting codes will be applied as they are
// defined in the CCSDS standard.
type CCSDSTransferFrame struct {
	// Synchronization word parameters. If unset, synchronization will be enabled
	// using the default CCSDS transfer frame standard synchronization word as in
	// 9.3.5 (Page 9-3) in the specification.
	SynchronizationParams *SynchronizationParams `protobuf:"bytes,1,opt,name=synchronization_params,json=synchronizationParams,proto3" json:"synchronization_params,omitempty"`
	// Convolutional coding parameters. If unset, convolutional coding is disabled.
	ConvolutionalCodingParams *CCSDSConvolutionalCodingParams `protobuf:"bytes,2,opt,name=convolutional_coding_params,json=convolutionalCodingParams,proto3" json:"convolutional_coding_params,omitempty"`
	// Scrambling parameters. If unset, scrambling is disabled.
	ScramblingParams *CCSDSScramblingParams `protobuf:"bytes,3,opt,name=scrambling_params,json=scramblingParams,proto3" json:"scrambling_params,omitempty"`
	// Reed-Solomon parameters. If unset, Reed-Solomon is disabled.
	ReedSolomonParams *CCSDSReedSolomonParams `protobuf:"bytes,4,opt,name=reed_solomon_params,json=reedSolomonParams,proto3" json:"reed_solomon_params,omitempty"`
	// Frame length, in bytes.
	FrameLengthBytes uint32 `protobuf:"varint,5,opt,name=frame_length_bytes,json=frameLengthBytes,proto3" json:"frame_length_bytes,omitempty"`
	// Line coding used.
	LineCoding           LineCoding `protobuf:"varint,6,opt,name=line_coding,json=lineCoding,proto3,enum=stellarstation.api.v1.radio.LineCoding" json:"line_coding,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CCSDSTransferFrame) Reset()         { *m = CCSDSTransferFrame{} }
func (m *CCSDSTransferFrame) String() string { return proto.CompactTextString(m) }
func (*CCSDSTransferFrame) ProtoMessage()    {}
func (*CCSDSTransferFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{5}
}

func (m *CCSDSTransferFrame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CCSDSTransferFrame.Unmarshal(m, b)
}
func (m *CCSDSTransferFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CCSDSTransferFrame.Marshal(b, m, deterministic)
}
func (m *CCSDSTransferFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCSDSTransferFrame.Merge(m, src)
}
func (m *CCSDSTransferFrame) XXX_Size() int {
	return xxx_messageInfo_CCSDSTransferFrame.Size(m)
}
func (m *CCSDSTransferFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_CCSDSTransferFrame.DiscardUnknown(m)
}

var xxx_messageInfo_CCSDSTransferFrame proto.InternalMessageInfo

func (m *CCSDSTransferFrame) GetSynchronizationParams() *SynchronizationParams {
	if m != nil {
		return m.SynchronizationParams
	}
	return nil
}

func (m *CCSDSTransferFrame) GetConvolutionalCodingParams() *CCSDSConvolutionalCodingParams {
	if m != nil {
		return m.ConvolutionalCodingParams
	}
	return nil
}

func (m *CCSDSTransferFrame) GetScramblingParams() *CCSDSScramblingParams {
	if m != nil {
		return m.ScramblingParams
	}
	return nil
}

func (m *CCSDSTransferFrame) GetReedSolomonParams() *CCSDSReedSolomonParams {
	if m != nil {
		return m.ReedSolomonParams
	}
	return nil
}

func (m *CCSDSTransferFrame) GetFrameLengthBytes() uint32 {
	if m != nil {
		return m.FrameLengthBytes
	}
	return 0
}

func (m *CCSDSTransferFrame) GetLineCoding() LineCoding {
	if m != nil {
		return m.LineCoding
	}
	return LineCoding_NRZ_L
}

// ASM+Golay mode for GOM Space AX100 radio.
// https://gomspace.com/UserFiles/Subsystems/datasheet/gs-ds-nanocom-ax100-33.pdf
type ASMGolay struct {
	// Synchronization word parameters. If unset, the default synchronization word defined
	// by the AX100 will be used.
	SynchronizationParams *SynchronizationParams `protobuf:"bytes,1,opt,name=synchronization_params,json=synchronizationParams,proto3" json:"synchronization_params,omitempty"`
	// Whether to enable CCSDS scrambling.
	EnableCcsdsScramble bool `protobuf:"varint,2,opt,name=enable_ccsds_scramble,json=enableCcsdsScramble,proto3" json:"enable_ccsds_scramble,omitempty"`
	// Whether to enable Reed Solomon error correction.
	EnableReedSolomon bool `protobuf:"varint,3,opt,name=enable_reed_solomon,json=enableReedSolomon,proto3" json:"enable_reed_solomon,omitempty"`
	// Whether to enable CRC checking.
	EnableCrcCheck       bool     `protobuf:"varint,4,opt,name=enable_crc_check,json=enableCrcCheck,proto3" json:"enable_crc_check,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ASMGolay) Reset()         { *m = ASMGolay{} }
func (m *ASMGolay) String() string { return proto.CompactTextString(m) }
func (*ASMGolay) ProtoMessage()    {}
func (*ASMGolay) Descriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{6}
}

func (m *ASMGolay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ASMGolay.Unmarshal(m, b)
}
func (m *ASMGolay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ASMGolay.Marshal(b, m, deterministic)
}
func (m *ASMGolay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ASMGolay.Merge(m, src)
}
func (m *ASMGolay) XXX_Size() int {
	return xxx_messageInfo_ASMGolay.Size(m)
}
func (m *ASMGolay) XXX_DiscardUnknown() {
	xxx_messageInfo_ASMGolay.DiscardUnknown(m)
}

var xxx_messageInfo_ASMGolay proto.InternalMessageInfo

func (m *ASMGolay) GetSynchronizationParams() *SynchronizationParams {
	if m != nil {
		return m.SynchronizationParams
	}
	return nil
}

func (m *ASMGolay) GetEnableCcsdsScramble() bool {
	if m != nil {
		return m.EnableCcsdsScramble
	}
	return false
}

func (m *ASMGolay) GetEnableReedSolomon() bool {
	if m != nil {
		return m.EnableReedSolomon
	}
	return false
}

func (m *ASMGolay) GetEnableCrcCheck() bool {
	if m != nil {
		return m.EnableCrcCheck
	}
	return false
}

// Framing for satellites that don't conform to a particular standard. Usually, only
// a synchronization word and expected frame length can be set.
type Bitstream struct {
	// Synchronization word parameters. If unset, synchronization is disabled.
	SynchronizationParams *SynchronizationParams `protobuf:"bytes,1,opt,name=synchronization_params,json=synchronizationParams,proto3" json:"synchronization_params,omitempty"`
	// Frame length, in bytes.
	FrameLengthBytes uint32 `protobuf:"varint,2,opt,name=frame_length_bytes,json=frameLengthBytes,proto3" json:"frame_length_bytes,omitempty"`
	// Line coding used.
	LineCoding           LineCoding `protobuf:"varint,3,opt,name=line_coding,json=lineCoding,proto3,enum=stellarstation.api.v1.radio.LineCoding" json:"line_coding,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Bitstream) Reset()         { *m = Bitstream{} }
func (m *Bitstream) String() string { return proto.CompactTextString(m) }
func (*Bitstream) ProtoMessage()    {}
func (*Bitstream) Descriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{7}
}

func (m *Bitstream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bitstream.Unmarshal(m, b)
}
func (m *Bitstream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bitstream.Marshal(b, m, deterministic)
}
func (m *Bitstream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bitstream.Merge(m, src)
}
func (m *Bitstream) XXX_Size() int {
	return xxx_messageInfo_Bitstream.Size(m)
}
func (m *Bitstream) XXX_DiscardUnknown() {
	xxx_messageInfo_Bitstream.DiscardUnknown(m)
}

var xxx_messageInfo_Bitstream proto.InternalMessageInfo

func (m *Bitstream) GetSynchronizationParams() *SynchronizationParams {
	if m != nil {
		return m.SynchronizationParams
	}
	return nil
}

func (m *Bitstream) GetFrameLengthBytes() uint32 {
	if m != nil {
		return m.FrameLengthBytes
	}
	return 0
}

func (m *Bitstream) GetLineCoding() LineCoding {
	if m != nil {
		return m.LineCoding
	}
	return LineCoding_NRZ_L
}

// Parameters for frame synchronization.
type SynchronizationParams struct {
	// The actual bytes of the synchronization word. Least significant bit aligned
	// E.g.
	// 15-bit sync word of 0x7fff should be represented as 0111 1111 1111 1111 or [0x7f, 0xff]
	SynchronizationWord []byte `protobuf:"bytes,1,opt,name=synchronization_word,json=synchronizationWord,proto3" json:"synchronization_word,omitempty"`
	// The length in bits of the synchronization word.
	LengthBits           uint32   `protobuf:"varint,2,opt,name=length_bits,json=lengthBits,proto3" json:"length_bits,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SynchronizationParams) Reset()         { *m = SynchronizationParams{} }
func (m *SynchronizationParams) String() string { return proto.CompactTextString(m) }
func (*SynchronizationParams) ProtoMessage()    {}
func (*SynchronizationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{8}
}

func (m *SynchronizationParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SynchronizationParams.Unmarshal(m, b)
}
func (m *SynchronizationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SynchronizationParams.Marshal(b, m, deterministic)
}
func (m *SynchronizationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SynchronizationParams.Merge(m, src)
}
func (m *SynchronizationParams) XXX_Size() int {
	return xxx_messageInfo_SynchronizationParams.Size(m)
}
func (m *SynchronizationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_SynchronizationParams.DiscardUnknown(m)
}

var xxx_messageInfo_SynchronizationParams proto.InternalMessageInfo

func (m *SynchronizationParams) GetSynchronizationWord() []byte {
	if m != nil {
		return m.SynchronizationWord
	}
	return nil
}

func (m *SynchronizationParams) GetLengthBits() uint32 {
	if m != nil {
		return m.LengthBits
	}
	return 0
}

// PACKET communication based on AX.25. https://www.sigidwiki.com/wiki/PACKET.
type AX25 struct {
	// Whether or not G3RUH scrambling is used.
	G3Ruh bool `protobuf:"varint,1,opt,name=g3ruh,proto3" json:"g3ruh,omitempty"`
	// Destination callsign.
	DestinationCallsign string `protobuf:"bytes,2,opt,name=destination_callsign,json=destinationCallsign,proto3" json:"destination_callsign,omitempty"`
	// Destination SSID.
	DestinationSsid uint32 `protobuf:"varint,3,opt,name=destination_ssid,json=destinationSsid,proto3" json:"destination_ssid,omitempty"`
	// Source callsign.
	SourceCallsign string `protobuf:"bytes,4,opt,name=source_callsign,json=sourceCallsign,proto3" json:"source_callsign,omitempty"`
	// Source SSID.
	SourceSsid           uint32   `protobuf:"varint,5,opt,name=source_ssid,json=sourceSsid,proto3" json:"source_ssid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AX25) Reset()         { *m = AX25{} }
func (m *AX25) String() string { return proto.CompactTextString(m) }
func (*AX25) ProtoMessage()    {}
func (*AX25) Descriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{9}
}

func (m *AX25) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AX25.Unmarshal(m, b)
}
func (m *AX25) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AX25.Marshal(b, m, deterministic)
}
func (m *AX25) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AX25.Merge(m, src)
}
func (m *AX25) XXX_Size() int {
	return xxx_messageInfo_AX25.Size(m)
}
func (m *AX25) XXX_DiscardUnknown() {
	xxx_messageInfo_AX25.DiscardUnknown(m)
}

var xxx_messageInfo_AX25 proto.InternalMessageInfo

func (m *AX25) GetG3Ruh() bool {
	if m != nil {
		return m.G3Ruh
	}
	return false
}

func (m *AX25) GetDestinationCallsign() string {
	if m != nil {
		return m.DestinationCallsign
	}
	return ""
}

func (m *AX25) GetDestinationSsid() uint32 {
	if m != nil {
		return m.DestinationSsid
	}
	return 0
}

func (m *AX25) GetSourceCallsign() string {
	if m != nil {
		return m.SourceCallsign
	}
	return ""
}

func (m *AX25) GetSourceSsid() uint32 {
	if m != nil {
		return m.SourceSsid
	}
	return 0
}

// Parameters for convolutional coding applied to a bitstream.
// https://en.wikipedia.org/wiki/Convolutional_code
type ConvolutionalCodingParams struct {
	// The constraint length, `k`, of the code.
	K uint32 `protobuf:"varint,1,opt,name=k,proto3" json:"k,omitempty"`
	// The inverse of the rate of coding, e.g., if rate is `1 / r`, `inverse_rate` is `r`.
	InverseRate uint32 `protobuf:"varint,2,opt,name=inverse_rate,json=inverseRate,proto3" json:"inverse_rate,omitempty"`
	// The polynomials used for coding. Must have `r` number of elements, where the most significant
	// `k` bits of each element will be used as the polynomial for that index.
	Polynomial           [][]byte `protobuf:"bytes,3,rep,name=polynomial,proto3" json:"polynomial,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConvolutionalCodingParams) Reset()         { *m = ConvolutionalCodingParams{} }
func (m *ConvolutionalCodingParams) String() string { return proto.CompactTextString(m) }
func (*ConvolutionalCodingParams) ProtoMessage()    {}
func (*ConvolutionalCodingParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{10}
}

func (m *ConvolutionalCodingParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConvolutionalCodingParams.Unmarshal(m, b)
}
func (m *ConvolutionalCodingParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConvolutionalCodingParams.Marshal(b, m, deterministic)
}
func (m *ConvolutionalCodingParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvolutionalCodingParams.Merge(m, src)
}
func (m *ConvolutionalCodingParams) XXX_Size() int {
	return xxx_messageInfo_ConvolutionalCodingParams.Size(m)
}
func (m *ConvolutionalCodingParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvolutionalCodingParams.DiscardUnknown(m)
}

var xxx_messageInfo_ConvolutionalCodingParams proto.InternalMessageInfo

func (m *ConvolutionalCodingParams) GetK() uint32 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *ConvolutionalCodingParams) GetInverseRate() uint32 {
	if m != nil {
		return m.InverseRate
	}
	return 0
}

func (m *ConvolutionalCodingParams) GetPolynomial() [][]byte {
	if m != nil {
		return m.Polynomial
	}
	return nil
}

// Parameters for scrambling applied to a bitstream.
type ScramblingParams struct {
	// The type of scrambling.
	Type ScramblingParams_Type `protobuf:"varint,1,opt,name=type,proto3,enum=stellarstation.api.v1.radio.ScramblingParams_Type" json:"type,omitempty"`
	// The length of the shift register, in bits.
	NumBits uint32 `protobuf:"varint,2,opt,name=num_bits,json=numBits,proto3" json:"num_bits,omitempty"`
	// The polynomial mask for the shift register. The most significant `num_bits` bits of `mask` will
	// be used.
	Mask []byte `protobuf:"bytes,3,opt,name=mask,proto3" json:"mask,omitempty"`
	// The initial contents of the shift register. The most significant `num_bits` bits of `mask` will
	// be used.
	Seed                 []byte   `protobuf:"bytes,4,opt,name=seed,proto3" json:"seed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScramblingParams) Reset()         { *m = ScramblingParams{} }
func (m *ScramblingParams) String() string { return proto.CompactTextString(m) }
func (*ScramblingParams) ProtoMessage()    {}
func (*ScramblingParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_66895b3707e74834, []int{11}
}

func (m *ScramblingParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScramblingParams.Unmarshal(m, b)
}
func (m *ScramblingParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScramblingParams.Marshal(b, m, deterministic)
}
func (m *ScramblingParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScramblingParams.Merge(m, src)
}
func (m *ScramblingParams) XXX_Size() int {
	return xxx_messageInfo_ScramblingParams.Size(m)
}
func (m *ScramblingParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ScramblingParams.DiscardUnknown(m)
}

var xxx_messageInfo_ScramblingParams proto.InternalMessageInfo

func (m *ScramblingParams) GetType() ScramblingParams_Type {
	if m != nil {
		return m.Type
	}
	return ScramblingParams_ADDITIVE
}

func (m *ScramblingParams) GetNumBits() uint32 {
	if m != nil {
		return m.NumBits
	}
	return 0
}

func (m *ScramblingParams) GetMask() []byte {
	if m != nil {
		return m.Mask
	}
	return nil
}

func (m *ScramblingParams) GetSeed() []byte {
	if m != nil {
		return m.Seed
	}
	return nil
}

func init() {
	proto.RegisterEnum("stellarstation.api.v1.radio.Modulation", Modulation_name, Modulation_value)
	proto.RegisterEnum("stellarstation.api.v1.radio.LineCoding", LineCoding_name, LineCoding_value)
	proto.RegisterEnum("stellarstation.api.v1.radio.CCSDSConvolutionalCodingParams_PolynomialInversion", CCSDSConvolutionalCodingParams_PolynomialInversion_name, CCSDSConvolutionalCodingParams_PolynomialInversion_value)
	proto.RegisterEnum("stellarstation.api.v1.radio.CCSDSConvolutionalCodingParams_Puncturing", CCSDSConvolutionalCodingParams_Puncturing_name, CCSDSConvolutionalCodingParams_Puncturing_value)
	proto.RegisterEnum("stellarstation.api.v1.radio.CCSDSReedSolomonParams_BlockLengthType", CCSDSReedSolomonParams_BlockLengthType_name, CCSDSReedSolomonParams_BlockLengthType_value)
	proto.RegisterEnum("stellarstation.api.v1.radio.ScramblingParams_Type", ScramblingParams_Type_name, ScramblingParams_Type_value)
	proto.RegisterType((*RadioDeviceConfiguration)(nil), "stellarstation.api.v1.radio.RadioDeviceConfiguration")
	proto.RegisterType((*CommunicationProtocol)(nil), "stellarstation.api.v1.radio.CommunicationProtocol")
	proto.RegisterType((*CCSDSConvolutionalCodingParams)(nil), "stellarstation.api.v1.radio.CCSDSConvolutionalCodingParams")
	proto.RegisterType((*CCSDSScramblingParams)(nil), "stellarstation.api.v1.radio.CCSDSScramblingParams")
	proto.RegisterType((*CCSDSReedSolomonParams)(nil), "stellarstation.api.v1.radio.CCSDSReedSolomonParams")
	proto.RegisterType((*CCSDSTransferFrame)(nil), "stellarstation.api.v1.radio.CCSDSTransferFrame")
	proto.RegisterType((*ASMGolay)(nil), "stellarstation.api.v1.radio.ASMGolay")
	proto.RegisterType((*Bitstream)(nil), "stellarstation.api.v1.radio.Bitstream")
	proto.RegisterType((*SynchronizationParams)(nil), "stellarstation.api.v1.radio.SynchronizationParams")
	proto.RegisterType((*AX25)(nil), "stellarstation.api.v1.radio.AX25")
	proto.RegisterType((*ConvolutionalCodingParams)(nil), "stellarstation.api.v1.radio.ConvolutionalCodingParams")
	proto.RegisterType((*ScramblingParams)(nil), "stellarstation.api.v1.radio.ScramblingParams")
}

func init() {
	proto.RegisterFile("stellarstation/api/v1/radio/radio.proto", fileDescriptor_66895b3707e74834)
}

var fileDescriptor_66895b3707e74834 = []byte{
	// 1388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xdd, 0x6e, 0x1a, 0x47,
	0x14, 0x66, 0x01, 0xdb, 0xf8, 0x80, 0xed, 0xf1, 0x60, 0x27, 0x44, 0x91, 0x12, 0x67, 0xa5, 0x36,
	0x34, 0x6a, 0xb1, 0x58, 0x0c, 0x71, 0xd5, 0x2b, 0x7e, 0x0c, 0x46, 0x06, 0x87, 0xcc, 0xda, 0x69,
	0x95, 0x9b, 0xd1, 0xb2, 0x8c, 0xf1, 0xca, 0xfb, 0x43, 0x77, 0x17, 0xb7, 0xa4, 0x57, 0x6d, 0x2f,
	0xfa, 0x3e, 0xbd, 0xac, 0x7a, 0x59, 0xa9, 0x6f, 0xd2, 0xcb, 0xbe, 0x41, 0xa5, 0x6a, 0x66, 0x77,
	0xf9, 0xb1, 0x1d, 0x12, 0x25, 0x52, 0x6e, 0xe0, 0xec, 0x37, 0xe7, 0x7c, 0x67, 0xe6, 0x3b, 0x67,
	0x67, 0x66, 0xe1, 0xa9, 0xe7, 0x33, 0xd3, 0xd4, 0x5c, 0xcf, 0xd7, 0x7c, 0xc3, 0xb1, 0xf7, 0xb5,
	0x91, 0xb1, 0x7f, 0x5d, 0xdc, 0x77, 0xb5, 0x81, 0xe1, 0x04, 0xbf, 0x85, 0x91, 0xeb, 0xf8, 0x0e,
	0x7e, 0xb8, 0xe8, 0x58, 0xd0, 0x46, 0x46, 0xe1, 0xba, 0x58, 0x10, 0x2e, 0xf2, 0x7f, 0x12, 0xe4,
	0x08, 0xb7, 0x1a, 0xec, 0xda, 0xd0, 0x59, 0xdd, 0xb1, 0x2f, 0x8c, 0xe1, 0xd8, 0x15, 0x9e, 0xb8,
	0x00, 0x59, 0x9d, 0xd9, 0x3e, 0x73, 0xe9, 0x85, 0xcb, 0xbe, 0x1f, 0x33, 0x5b, 0x9f, 0xd0, 0xcb,
	0x37, 0x39, 0x69, 0x4f, 0xca, 0x27, 0xc9, 0x76, 0x30, 0xd4, 0x8c, 0x46, 0x8e, 0xdf, 0xe0, 0x16,
	0x80, 0xe5, 0x0c, 0xc6, 0xa6, 0x88, 0xce, 0xc5, 0xf7, 0xa4, 0xfc, 0xa6, 0xf2, 0xb4, 0xb0, 0x24,
	0x7d, 0xa1, 0x3b, 0x75, 0x27, 0x73, 0xa1, 0x38, 0x07, 0x6b, 0x7d, 0xc3, 0x77, 0x35, 0x9f, 0xe5,
	0x12, 0x22, 0x59, 0xf4, 0x88, 0x4f, 0x21, 0x25, 0x56, 0xa5, 0x3b, 0x66, 0x2e, 0xb9, 0x27, 0xe5,
	0xd3, 0x8a, 0xb2, 0x34, 0x41, 0xdd, 0xb1, 0xac, 0xb1, 0x6d, 0xe8, 0x62, 0xa8, 0x17, 0x46, 0x92,
	0x29, 0x87, 0xfc, 0x7b, 0x1c, 0x76, 0xef, 0xf4, 0xc1, 0xcf, 0x21, 0xa9, 0xfd, 0xa8, 0x94, 0xc5,
	0x6a, 0xd3, 0xca, 0x93, 0xa5, 0x59, 0xaa, 0xdf, 0x29, 0xe5, 0xe3, 0x18, 0x11, 0x01, 0xb8, 0x05,
	0x2b, 0xba, 0xee, 0x0d, 0x3c, 0x21, 0x40, 0x5a, 0xd9, 0x5f, 0x3e, 0xbf, 0xba, 0xda, 0x50, 0xcf,
	0x5c, 0xcd, 0xf6, 0x2e, 0xb8, 0x96, 0x9a, 0xc5, 0x8e, 0x63, 0x24, 0x88, 0xc7, 0x4d, 0x58, 0xef,
	0x1b, 0xbe, 0xe7, 0xbb, 0x4c, 0xb3, 0x84, 0x0e, 0x69, 0xe5, 0xf3, 0xa5, 0x64, 0xb5, 0xc8, 0xfb,
	0x38, 0x46, 0x66, 0xa1, 0xb8, 0x01, 0xeb, 0x9a, 0x67, 0xd1, 0xa1, 0x63, 0x6a, 0x93, 0x50, 0xb4,
	0xcf, 0x96, 0x2f, 0x47, 0xed, 0xb6, 0xb8, 0xf3, 0x71, 0x8c, 0xa4, 0x34, 0xcf, 0x12, 0x76, 0x6d,
	0x1d, 0xd6, 0xf8, 0xfc, 0x0c, 0x7b, 0x28, 0xff, 0x93, 0x80, 0x47, 0x62, 0xe2, 0x75, 0xc7, 0xbe,
	0x76, 0xcc, 0x31, 0x67, 0xd0, 0xcc, 0xba, 0x33, 0x30, 0xec, 0x61, 0x4f, 0x73, 0x35, 0xcb, 0xc3,
	0xbf, 0x48, 0xb0, 0x33, 0x72, 0xcc, 0x89, 0xed, 0x58, 0x86, 0x66, 0x52, 0xc3, 0xbe, 0x66, 0xae,
	0xc7, 0xbb, 0x42, 0x12, 0x5d, 0xf1, 0xe2, 0xdd, 0xa2, 0xbc, 0x95, 0xbb, 0xd0, 0x9b, 0xf2, 0xb6,
	0x23, 0x5a, 0x92, 0x1d, 0xdd, 0x06, 0xf1, 0x05, 0xc0, 0x68, 0x6c, 0xeb, 0xfe, 0xd8, 0x35, 0xec,
	0x61, 0xd8, 0x8f, 0xcd, 0x8f, 0xca, 0x3c, 0x65, 0x23, 0x73, 0xcc, 0xb2, 0x0a, 0xd9, 0x3b, 0xe6,
	0x84, 0xd7, 0x61, 0xa5, 0x55, 0xa4, 0x2d, 0x05, 0xc5, 0x30, 0x86, 0x4d, 0x61, 0xd2, 0xf6, 0xe9,
	0xab, 0x23, 0x72, 0x76, 0xd4, 0x40, 0x92, 0xc0, 0x66, 0x00, 0x6d, 0x15, 0x51, 0x5c, 0x84, 0x28,
	0xdc, 0x4c, 0xc8, 0x3f, 0x4b, 0x00, 0xb3, 0x7c, 0x78, 0x0d, 0x12, 0x2f, 0x9a, 0x4d, 0x14, 0xc3,
	0x08, 0x32, 0xbd, 0xf3, 0xd3, 0xfa, 0xd9, 0x39, 0x39, 0xa2, 0x0a, 0x2d, 0x21, 0x69, 0x01, 0x29,
	0xd1, 0x03, 0x14, 0x5f, 0x40, 0x0e, 0x68, 0x19, 0x25, 0x16, 0x90, 0x32, 0xad, 0xa0, 0xe4, 0x02,
	0x52, 0xa1, 0xcf, 0xd1, 0xca, 0x02, 0xf2, 0x9c, 0x1e, 0xa2, 0x55, 0xf9, 0x3e, 0xec, 0x0a, 0x45,
	0x54, 0xdd, 0xd5, 0xac, 0xbe, 0x39, 0x15, 0x42, 0xfe, 0x53, 0x82, 0x7b, 0x62, 0x84, 0x30, 0x36,
	0x50, 0x1d, 0xd3, 0xb1, 0x1c, 0x3b, 0xac, 0xbc, 0x03, 0xdb, 0x7d, 0xd3, 0xd1, 0xaf, 0xa8, 0xc9,
	0xec, 0xa1, 0x7f, 0x49, 0xfd, 0xc9, 0x88, 0x85, 0x55, 0xaf, 0xbf, 0x5b, 0xfb, 0x5b, 0x7c, 0x85,
	0x1a, 0x27, 0xeb, 0x08, 0xae, 0xb3, 0xc9, 0x88, 0x91, 0xad, 0xfe, 0x22, 0x20, 0x17, 0x61, 0xeb,
	0x86, 0x0f, 0xde, 0x04, 0x20, 0x2a, 0x55, 0x94, 0x12, 0x55, 0xca, 0x65, 0x14, 0x8b, 0x9e, 0x4b,
	0x5f, 0x8b, 0x67, 0x49, 0xfe, 0x23, 0x09, 0xf8, 0xf6, 0x9b, 0x87, 0x0d, 0xb8, 0xe7, 0x4d, 0x6c,
	0xfd, 0xd2, 0x75, 0x6c, 0xe3, 0x8d, 0x98, 0x21, 0x1d, 0x89, 0x49, 0x84, 0x9b, 0xc0, 0xf2, 0xad,
	0x46, 0x5d, 0x0c, 0x0d, 0xa6, 0x4f, 0x76, 0xbd, 0xbb, 0x60, 0xfc, 0x13, 0x3c, 0xd4, 0xe7, 0xdb,
	0x8c, 0xea, 0xa2, 0xcf, 0xa2, 0x7c, 0xc1, 0xd6, 0xf1, 0xcd, 0x47, 0xf4, 0x2a, 0x79, 0xa0, 0xbf,
	0xf5, 0xe5, 0xa4, 0xb0, 0xed, 0x4d, 0x2b, 0x1a, 0xa5, 0x4c, 0xbc, 0xcf, 0x6e, 0x7a, 0x57, 0x33,
	0x10, 0xe4, 0xdd, 0x40, 0xb0, 0x0e, 0x59, 0x97, 0xb1, 0x01, 0xf5, 0x82, 0x4a, 0x46, 0x29, 0x82,
	0xbd, 0xa7, 0xf4, 0x01, 0x5d, 0x40, 0xb6, 0xdd, 0x5b, 0x8d, 0xf6, 0x25, 0xe0, 0x0b, 0x5e, 0xb6,
	0xa8, 0xd1, 0xfa, 0x13, 0x9f, 0x79, 0xb9, 0x95, 0x3d, 0x29, 0xbf, 0x41, 0x90, 0x18, 0x09, 0x3a,
	0xa2, 0xc6, 0x71, 0x7c, 0x0c, 0x69, 0xd3, 0xb0, 0x59, 0xa8, 0x73, 0x6e, 0xf5, 0x3d, 0x0e, 0xa7,
	0x8e, 0x61, 0xb3, 0x40, 0x37, 0x02, 0xe6, 0xd4, 0x96, 0x7f, 0x8d, 0x43, 0x2a, 0xda, 0x21, 0x3f,
	0x65, 0xcb, 0x28, 0xb0, 0xcb, 0x6c, 0xad, 0x6f, 0x32, 0x2a, 0x8e, 0x07, 0x1a, 0xaa, 0xce, 0x44,
	0xb3, 0xa4, 0x48, 0x36, 0x18, 0xac, 0xf3, 0xb1, 0xb0, 0x44, 0x8c, 0x9f, 0xe0, 0x61, 0xcc, 0x7c,
	0x3d, 0x44, 0xad, 0x53, 0x64, 0x3b, 0x18, 0x9a, 0x13, 0x1b, 0xe7, 0x01, 0x45, 0x39, 0x5c, 0x9d,
	0xea, 0x97, 0x4c, 0xbf, 0x12, 0x55, 0x4b, 0x91, 0xcd, 0x90, 0xde, 0xd5, 0xeb, 0x1c, 0x95, 0xff,
	0x95, 0x60, 0x7d, 0x7a, 0xde, 0x7c, 0x4a, 0x19, 0xee, 0x2e, 0x7b, 0xfc, 0xfd, 0xca, 0x9e, 0xf8,
	0xf0, 0xb2, 0x5f, 0xc1, 0xee, 0x9d, 0xf3, 0xc4, 0x45, 0xd8, 0xb9, 0xb9, 0xf6, 0x1f, 0x1c, 0x77,
	0x20, 0x56, 0x9e, 0x21, 0xd9, 0x1b, 0x63, 0xdf, 0x3a, 0xee, 0x00, 0x3f, 0x86, 0x74, 0x34, 0x7b,
	0xc3, 0x8f, 0x26, 0x0f, 0x01, 0xc4, 0x45, 0x95, 0xff, 0x92, 0x20, 0xc9, 0x2f, 0x15, 0x78, 0x07,
	0x56, 0x86, 0x25, 0x77, 0x7c, 0x29, 0xd8, 0x52, 0x24, 0x78, 0xe0, 0x29, 0x07, 0xcc, 0xf3, 0x0d,
	0x3b, 0x48, 0xa7, 0x6b, 0xa6, 0xe9, 0x19, 0xc3, 0xe0, 0xca, 0xb5, 0x4e, 0xb2, 0x73, 0x63, 0xf5,
	0x70, 0x08, 0x7f, 0x01, 0x68, 0x3e, 0xc4, 0xf3, 0x8c, 0x81, 0x50, 0x63, 0x83, 0x6c, 0xcd, 0xe1,
	0xaa, 0x67, 0x0c, 0xf0, 0x53, 0xd8, 0xf2, 0x9c, 0xb1, 0xab, 0xb3, 0x19, 0x71, 0x52, 0x10, 0x6f,
	0x06, 0xf0, 0x94, 0xf3, 0x31, 0xa4, 0x43, 0x47, 0x41, 0x17, 0xbc, 0x7a, 0x10, 0x40, 0x9c, 0x49,
	0x36, 0xe1, 0xc1, 0xdb, 0xaf, 0x08, 0x19, 0x90, 0xae, 0xc4, 0xb2, 0x36, 0x88, 0x74, 0x85, 0x9f,
	0x40, 0x26, 0xb8, 0x24, 0x30, 0x2a, 0xee, 0x7d, 0x81, 0x26, 0xe9, 0x10, 0x23, 0xfc, 0xee, 0xf7,
	0x08, 0x60, 0x76, 0xca, 0xe7, 0x12, 0x7b, 0x89, 0x7c, 0x86, 0xcc, 0x21, 0xf2, 0xdf, 0x12, 0xa0,
	0x9b, 0x9b, 0x13, 0x6e, 0x42, 0x72, 0xee, 0x04, 0x7a, 0x47, 0x1f, 0xde, 0x08, 0x2e, 0x88, 0x03,
	0x47, 0xc4, 0xe3, 0x07, 0x90, 0xb2, 0xc7, 0xd6, 0x7c, 0xbd, 0xd6, 0xec, 0xb1, 0xc5, 0x8b, 0x85,
	0x31, 0x24, 0x2d, 0xcd, 0xbb, 0x12, 0x72, 0x66, 0x88, 0xb0, 0x39, 0xe6, 0x31, 0x36, 0x10, 0xc2,
	0x65, 0x88, 0xb0, 0xe5, 0x3c, 0x24, 0xc5, 0xe9, 0x94, 0x81, 0x54, 0xb5, 0xd1, 0x68, 0x9f, 0xb5,
	0x5f, 0x1d, 0x05, 0x57, 0x83, 0xee, 0x79, 0xe7, 0xac, 0xdd, 0xeb, 0xb4, 0xeb, 0x55, 0x81, 0x49,
	0xcf, 0x7e, 0x8b, 0x03, 0xcc, 0xae, 0xc6, 0x3c, 0xa0, 0xd1, 0x56, 0xab, 0xb5, 0xce, 0x51, 0x03,
	0xc5, 0xf8, 0x4d, 0xa0, 0xa9, 0x9e, 0x20, 0x09, 0xa7, 0x20, 0x59, 0xe5, 0x56, 0x9c, 0x5b, 0xb5,
	0x9e, 0x7a, 0x82, 0x12, 0xdc, 0xea, 0x72, 0x2c, 0xc9, 0xad, 0x97, 0x1c, 0x5b, 0xe1, 0x56, 0x4f,
	0x3d, 0x39, 0x44, 0xab, 0xfc, 0x7a, 0xd1, 0x53, 0x4f, 0x8a, 0x15, 0xb4, 0x16, 0x9a, 0x25, 0x05,
	0xa5, 0x42, 0xb3, 0x72, 0x80, 0xd6, 0x31, 0xc0, 0x2a, 0x77, 0x50, 0x0e, 0x11, 0x84, 0xb6, 0x52,
	0xae, 0xa0, 0x34, 0x77, 0x79, 0x21, 0xd8, 0x32, 0x82, 0xb7, 0xda, 0x3d, 0x44, 0x1b, 0x1c, 0x7c,
	0x59, 0xed, 0x16, 0x2b, 0x68, 0x33, 0x34, 0x4b, 0x0a, 0xda, 0x0a, 0xcd, 0xca, 0x01, 0x42, 0x9c,
	0x81, 0x3b, 0x28, 0x87, 0x68, 0x3b, 0xb4, 0x39, 0x1b, 0xe6, 0x2b, 0xe8, 0xaa, 0x27, 0x28, 0xcb,
	0xb9, 0x5a, 0xdc, 0xda, 0xc1, 0xab, 0x10, 0xaf, 0x76, 0xd1, 0x2e, 0xff, 0x6f, 0x76, 0xd1, 0x3d,
	0xfe, 0xdf, 0xeb, 0xa2, 0xfb, 0xcf, 0xce, 0x01, 0x66, 0xef, 0x23, 0xe7, 0x3e, 0x25, 0xaf, 0x69,
	0x07, 0xc5, 0x22, 0xb3, 0x8b, 0xa4, 0xc8, 0x54, 0x03, 0x21, 0x1a, 0xa7, 0xe4, 0x75, 0x20, 0x44,
	0xad, 0x47, 0x3b, 0x81, 0x10, 0xb5, 0x1e, 0xed, 0x06, 0x42, 0xd4, 0x7a, 0x54, 0x45, 0xab, 0x35,
	0x03, 0x1e, 0xeb, 0x8e, 0xb5, 0xac, 0x19, 0x6a, 0x20, 0x3e, 0x8b, 0xc4, 0xe7, 0x40, 0x4f, 0x7a,
	0x7d, 0x38, 0x34, 0xfc, 0xcb, 0x71, 0xbf, 0xa0, 0x3b, 0xd6, 0xbe, 0x61, 0x5f, 0x38, 0x61, 0xa4,
	0x61, 0xeb, 0xfb, 0x43, 0xe7, 0xab, 0x25, 0x9f, 0x62, 0xfd, 0x55, 0xf1, 0xad, 0x51, 0xfa, 0x3f,
	0x00, 0x00, 0xff, 0xff, 0x64, 0x18, 0xf0, 0x15, 0xb0, 0x0d, 0x00, 0x00,
}
